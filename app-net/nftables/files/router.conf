# /etc/nftables.conf

# Flush all existing rules
flush ruleset

# -------------------------------------------------------------------
# Interface & network variables
# -------------------------------------------------------------------
define WAN       = "enp1s0"
define LAN       = "enp2s0"
define LAN_NET   = 10.0.5.0/24
define ROUTER_IP = 10.0.5.1
define QB_PORT   = 52345
define LAN_BCAST = 255.255.255.255

# =============================== FILTER ===============================
table ip filter {

  # ---------------------------------------------------------------
  # INPUT: traffic to the router itself
  # ---------------------------------------------------------------
  chain input {
    type filter hook input priority 0; policy drop;

    # Keep router usable: allow return/related first
    ct state established,related accept comment "Allow established/related"

    # Sanity
    ct state invalid counter drop comment "Drop invalid"
    tcp flags & (syn|rst|ack) != syn ct state new drop comment "Drop NEW TCP without SYN"

    # Loopback
    iif lo accept comment "Allow loopback"

    # Dead-silent to WAN (no logs, no replies)
    iifname $WAN drop comment "Silent to unsolicited WAN input"

    # DHCP from LAN (clients may source 0.0.0.0)
    iifname $LAN udp sport 68 udp dport 67 accept comment "Allow DHCP (LAN->router)"

    # Anti-spoof on LAN
    iifname $LAN ip saddr != $LAN_NET drop comment "Anti-spoof on LAN"

    # SSH from LAN (rate-limited)
    iifname $LAN ip saddr $LAN_NET tcp dport 22 ct state new tcp flags syn \
      limit rate 30/minute burst 10 packets accept comment "Allow SSH from LAN (limited)"

    # LAN -> router DNS (dnsmasq)
    iifname $LAN ip saddr $LAN_NET ip daddr $ROUTER_IP udp dport 53 accept comment "Allow LAN->DNS UDP"
    iifname $LAN ip saddr $LAN_NET ip daddr $ROUTER_IP tcp dport 53 accept comment "Allow LAN->DNS TCP"

    # Useful ICMP from LAN
    iifname $LAN ip saddr $LAN_NET icmp type { echo-request, destination-unreachable, time-exceeded, parameter-problem } \
      accept comment "Allow useful ICMP from LAN"

    # qBittorrent from LAN
    iifname $LAN ip saddr $LAN_NET tcp dport $QB_PORT ct state new accept comment "Allow qBit TCP from LAN"
    iifname $LAN ip saddr $LAN_NET udp dport $QB_PORT ct state new accept comment "Allow qBit UDP from LAN"

    # Broadcast helpers on LAN (rate-limited)
    iifname $LAN ip saddr $LAN_NET ip daddr $LAN_BCAST udp dport 54925 \
      limit rate 10/second accept comment "Allow Brother scanner discovery (limited)"
    iifname $LAN ip saddr $LAN_NET ip daddr $LAN_BCAST udp dport 137 \
      limit rate 10/second accept comment "Allow NetBIOS name service (limited)"

    # Block direct DoT to the router
    iifname $LAN tcp dport 853 drop comment "Block direct DoT TCP to router"
    iifname $LAN udp dport 853 drop comment "Block direct DoT UDP to router"

    # Last resort: log (rate-limited) then drop
    counter log prefix "INPUT_DROP: " limit rate 5/second drop comment "Log+drop other input"
  }

  # ---------------------------------------------------------------
  # FORWARD: LAN <-> WAN through the router
  # ---------------------------------------------------------------
  chain forward {
    type filter hook forward priority 0; policy drop;

    # Sanity
    ct state invalid drop comment "Drop invalid"
    tcp flags & (syn|rst|ack) != syn ct state new drop comment "Drop NEW TCP without SYN"

    # Enforce DNS-over-TLS policy (no LAN->Internet DoT)
    iifname $LAN oifname $WAN udp dport 853 drop comment "Block LAN->Internet DoT UDP"
    iifname $LAN oifname $WAN tcp dport 853 drop comment "Block LAN->Internet DoT TCP"

    # Gaming/VoIP friendly: allow general LAN->WAN; conntrack handles return
    iifname $LAN oifname $WAN accept comment "Allow LAN->WAN"

    # Allow return and related (incl. ICMP errors for PMTU/ICE/RTP)
    iifname $WAN oifname $LAN ct state established,related accept comment "Allow WAN->LAN return/related"

    # Log (rate-limited) then drop anything else
    counter log prefix "FORWARD_DROP: " limit rate 5/second drop comment "Log+drop other forward"
  }

  # ---------------------------------------------------------------
  # OUTPUT: traffic sourced by the router
  # ---------------------------------------------------------------
  chain output {
    type filter hook output priority 0; policy accept;
    # For a paranoid egress policy, replace with drop and allowlist necessities (NTP, DoT, updates).
  }
}

# =============================== MANGLE ===============================
# MSS clamp: prevents TCP blackholes on paths that suppress ICMP "frag needed".
# Uses kernel route MTU, so it's safe even at MTU 1500.
table ip mangle {
  chain forward {
    type filter hook forward priority -150; policy accept;
    tcp flags syn tcp option maxseg size set rt mtu clamp comment "Clamp TCP MSS to path MTU"
  }
}

# ================================ NAT ================================
table ip nat {

  chain prerouting {
    type nat hook prerouting priority -100;

    # Redirect all LAN DNS to local dnsmasq on the router
    iifname $LAN udp dport 53 redirect to :53 comment "Redirect DNS UDP -> router"
    iifname $LAN tcp dport 53 redirect to :53 comment "Redirect DNS TCP -> router"
  }

  chain postrouting {
    type nat hook postrouting priority 100;

    # Masquerade all traffic going out WAN
    oifname $WAN masquerade comment "Masquerade outbound"
  }
}
