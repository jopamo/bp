# /etc/nftables.conf

# start clean
flush ruleset

# interface & network variables
define WAN       = "enp1s0"
define LAN       = "enp2s0"
define LAN_NET   = 10.0.5.0/24
define ROUTERIP  = 10.0.5.1
define QB_PORT   = 57456
define QB_HOST = 10.0.5.69

# -------------------------------
# Table: filter (IPv4)
# -------------------------------
table ip filter {

  # reverse path filter to kill spoofed sources arriving on WAN early
  chain prerouting {
    type filter hook prerouting priority 0; policy accept;

    iifname $WAN fib saddr . iif oif missing \
      counter log prefix "NFT chain=PREROUTING action=DROP reason=RPFILTER " flags all \
      drop comment "drop packets failing source rpfilter on WAN"
  }

  # traffic to the router itself
  chain input {
    type filter hook input priority 0; policy drop;

    # fast path for return traffic
    ct state established,related accept comment "allow established related"

    # sanity checks
    ct state invalid counter log prefix "NFT chain=INPUT action=DROP reason=INVALID " flags all drop comment "drop invalid"
    tcp flags & (fin|syn|rst|ack) != syn ct state new \
      counter log prefix "NFT chain=INPUT action=DROP reason=NOSYN " flags all drop comment "drop NEW tcp without syn"

    # loopback
    iif lo accept comment "allow loopback"

    # essential icmp from wan for pmtu and traceroute
    iifname $WAN icmp type { destination-unreachable, time-exceeded, parameter-problem } accept comment "allow essential icmp from wan"

    # silence unsolicited wan input
    iifname $WAN drop comment "silent drop other wan input"

    # dhcp from lan clients to router
    iifname $LAN udp sport 68 udp dport 67 accept comment "allow dhcp lan to router"

    # lan anti-spoof
    iifname $LAN ip saddr != $LAN_NET \
      counter log prefix "NFT chain=INPUT action=DROP reason=SPOOF " flags all drop comment "drop spoofed lan sources"

    # ssh from lan only
    iifname $LAN ip saddr $LAN_NET tcp dport 22 ct state new tcp flags syn accept comment "allow ssh from lan"

    # dns to router
    iifname $LAN ip saddr $LAN_NET ip daddr $ROUTERIP udp dport 53 accept comment "allow lan to dns udp"
    iifname $LAN ip saddr $LAN_NET ip daddr $ROUTERIP tcp dport 53 accept comment "allow lan to dns tcp"

    # useful icmp from lan
    iifname $LAN ip saddr $LAN_NET icmp type { echo-request, destination-unreachable, time-exceeded } accept comment "allow icmp from lan"

    # broadcast helpers on lan
    iifname $LAN ip saddr $LAN_NET ip daddr 255.255.255.255 udp dport 54925 accept comment "allow brother scanner discovery"
    iifname $LAN ip saddr $LAN_NET ip daddr 255.255.255.255 udp dport 137   accept comment "allow netbios name service"

    # qbittorrent control plane to router port (optional)
    iifname $LAN ip saddr $LAN_NET tcp dport $QB_PORT ct state new accept comment "allow qbittorrent tcp to router"
    iifname $LAN ip saddr $LAN_NET udp dport $QB_PORT ct state new accept comment "allow qbittorrent udp to router"

    # block direct dot to router
    iifname $LAN udp dport 853 counter log prefix "NFT chain=INPUT action=DROP reason=DOT_UDP " flags all drop comment "block dot udp to router"
    iifname $LAN tcp dport 853 counter log prefix "NFT chain=INPUT action=DROP reason=DOT_TCP " flags all drop comment "block dot tcp to router"

    # last-mile logging
    counter log prefix "NFT chain=INPUT action=DROP reason=OTHER " flags all limit rate 5/second drop comment "log drop other input"
  }

  # traffic forwarded through the router
  chain forward {
    type filter hook forward priority 0; policy drop;

    # sanity
    ct state invalid counter log prefix "NFT chain=FORWARD action=DROP reason=INVALID " flags all drop comment "drop invalid"
    tcp flags & (fin|syn|rst|ack) != syn ct state new \
      counter log prefix "NFT chain=FORWARD action=DROP reason=NOSYN " flags all drop comment "drop NEW tcp without syn"

    # clamp tcp mss to path mtu both ways to avoid pmtu blackholes
    tcp flags syn tcp option maxseg size set rt mtu comment "tcp mss clamp to pmtu"

    # block lan clients from sending dot directly to internet
    iifname $LAN oifname $WAN udp dport 853 counter log prefix "NFT chain=FORWARD action=DROP reason=DOT_UDP " flags all drop comment "block lan to wan dot udp"
    iifname $LAN oifname $WAN tcp dport 853 counter log prefix "NFT chain=FORWARD action=DROP reason=DOT_TCP " flags all drop comment "block lan to wan dot tcp"

    # allow lan to wan
    iifname $LAN oifname $WAN accept comment "allow lan to wan"

    # allow return traffic wan to lan
    iifname $WAN oifname $LAN ct state established,related accept comment "allow wan to lan return"

    # if you enable qbittorrent inbound, allow it here
    # iifname $WAN oifname $LAN tcp dport $QB_PORT ct state new accept comment "allow inbound qbittorrent tcp to lan host"
    # iifname $WAN oifname $LAN udp dport $QB_PORT ct state new accept comment "allow inbound qbittorrent udp to lan host"

    # tail log
    counter log prefix "NFT chain=FORWARD action=DROP reason=OTHER " flags all limit rate 5/second drop comment "log drop other forward"
  }

  # router's own output
  chain output {
    type filter hook output priority 0; policy accept;
  }
}

# -------------------------------
# Table: nat (IPv4)
# -------------------------------
table ip nat {

  chain prerouting {
    type nat hook prerouting priority -100;

    # force all lan dns to local resolver on router
    iifname $LAN udp dport 53 redirect to :53 comment "redirect dns udp to router"
    iifname $LAN tcp dport 53 redirect to :53 comment "redirect dns tcp to router"

    # if you want qbittorrent inbound to a lan host, dnat it here
    # iifname $WAN tcp dport $QB_PORT dnat to $QB_HOST comment "dnat inbound qbittorrent tcp to lan host"
    # iifname $WAN udp dport $QB_PORT dnat to $QB_HOST comment "dnat inbound qbittorrent udp to lan host"

    # optional hairpin so lan clients can hit $ROUTERIP:$QB_PORT and reach $QB_HOST
    # iifname $LAN ip daddr $ROUTERIP tcp dport $QB_PORT dnat to $QB_HOST comment "hairpin qbittorrent tcp"
    # iifname $LAN ip daddr $ROUTERIP udp dport $QB_PORT dnat to $QB_HOST comment "hairpin qbittorrent udp"
  }

  chain postrouting {
    type nat hook postrouting priority 100;

    # masquerade all egress on wan
    oifname $WAN masquerade comment "masquerade outbound"
  }
}
