#!/bin/bash

REPO_PATH="/var/db/repos/bp"

fetch_latest_boost_version() {
    local boost_url="https://www.boost.org/users/history/"
    local latest_version=$(curl -s "$boost_url" | grep -oP 'data-current-version="\K\d+\.\d+\.\d+')
    if [[ -z "$latest_version" ]]; then
        echo "Failed to fetch the latest Boost version"
        return 1
    fi
    echo "$latest_version"
}

update_ebuild() {
    local PACKAGE_PATH="${REPO_PATH}/$1"
    local PACKAGE_NAME="$2"
    local fetched_versions=$3

    IFS=$'\n' read -rd '' -a versions <<< "$fetched_versions"
    for version in "${versions[@]}"; do
        local new_ebuild_filename="${PACKAGE_NAME}-${version}.ebuild"
        local new_ebuild_file="${PACKAGE_PATH}/${new_ebuild_filename}"
        local ebuild_file=$(find "${PACKAGE_PATH}" -maxdepth 1 -type f -name "${PACKAGE_NAME}-*.ebuild" | sort | tail -n 1)

        if [[ -f "$new_ebuild_file" ]]; then
            echo "Ebuild file ${new_ebuild_filename} already exists."
            continue
        fi
        if [[ -z "$ebuild_file" ]]; then
            echo "No ebuild file found for ${PACKAGE_NAME}."
            continue
        fi

        mv "$ebuild_file" "$new_ebuild_file"
        (cd ${REPO_PATH} && repoman manifest)
        (cd ${REPO_PATH} && git add . && git commit -m "Update ${PACKAGE_NAME} to ${version}")
        echo "Ebuild updated for ${PACKAGE_NAME}: ${new_ebuild_filename}"
        break
    done

    if [[ ! -f "$new_ebuild_file" ]]; then
        echo "Failed to update ebuild for ${PACKAGE_NAME}"
        return 1
    fi
}

# Update Boost
boost_version=$(fetch_latest_boost_version)
[[ $? -eq 0 ]] && update_ebuild "lib-dev/boost" "boost" "$boost_version"

# Update Boost Build
[[ $? -eq 0 ]] && update_ebuild "lib-dev/boost-build" "boost-build" "$boost_version"
