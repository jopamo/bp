From b41545287684dace9d1b44928e6b21b7542e4b97 Mon Sep 17 00:00:00 2001
From: Yingwei Zheng <dtcxzyw2333@gmail.com>
Date: Mon, 15 Jul 2024 13:00:25 +0800
Subject: [PATCH 02/24] [ConstantFold] Fix result type when folding powi.f16
 (#98681)

Fixes #98665.

Gentoo-Component: llvm
---
 llvm/lib/Analysis/ConstantFolding.cpp   | 37 +++++++++++++------------
 llvm/test/Transforms/EarlyCSE/math-2.ll | 10 +++++++
 2 files changed, 29 insertions(+), 18 deletions(-)

diff --git a/lib/Analysis/ConstantFolding.cpp b/lib/Analysis/ConstantFolding.cpp
index 90da3390eab3..7d6b6ad732e6 100644
--- a/lib/Analysis/ConstantFolding.cpp
+++ b/lib/Analysis/ConstantFolding.cpp
@@ -2695,27 +2695,28 @@ static Constant *ConstantFoldScalarCall2(StringRef Name,
           ((Mask & fcPosInf) && Op1V.isPosInfinity());
         return ConstantInt::get(Ty, Result);
       }
+      case Intrinsic::powi: {
+        int Exp = static_cast<int>(Op2C->getSExtValue());
+        switch (Ty->getTypeID()) {
+        case Type::HalfTyID:
+        case Type::FloatTyID: {
+          APFloat Res(std::pow(Op1V.convertToFloat(), Exp));
+          if (Ty->isHalfTy()) {
+            bool Unused;
+            Res.convert(APFloat::IEEEhalf(), APFloat::rmNearestTiesToEven,
+                        &Unused);
+          }
+          return ConstantFP::get(Ty->getContext(), Res);
+        }
+        case Type::DoubleTyID:
+          return ConstantFP::get(Ty, std::pow(Op1V.convertToDouble(), Exp));
+        default:
+          return nullptr;
+        }
+      }
       default:
         break;
       }
-
-      if (!Ty->isHalfTy() && !Ty->isFloatTy() && !Ty->isDoubleTy())
-        return nullptr;
-      if (IntrinsicID == Intrinsic::powi && Ty->isHalfTy())
-        return ConstantFP::get(
-            Ty->getContext(),
-            APFloat((float)std::pow((float)Op1V.convertToDouble(),
-                                    (int)Op2C->getZExtValue())));
-      if (IntrinsicID == Intrinsic::powi && Ty->isFloatTy())
-        return ConstantFP::get(
-            Ty->getContext(),
-            APFloat((float)std::pow((float)Op1V.convertToDouble(),
-                                    (int)Op2C->getZExtValue())));
-      if (IntrinsicID == Intrinsic::powi && Ty->isDoubleTy())
-        return ConstantFP::get(
-            Ty->getContext(),
-            APFloat((double)std::pow(Op1V.convertToDouble(),
-                                     (int)Op2C->getZExtValue())));
     }
     return nullptr;
   }
diff --git a/test/Transforms/EarlyCSE/math-2.ll b/test/Transforms/EarlyCSE/math-2.ll
index d9f7c619fa01..60a2f19084c8 100644
--- a/test/Transforms/EarlyCSE/math-2.ll
+++ b/test/Transforms/EarlyCSE/math-2.ll
@@ -98,4 +98,14 @@ define double @i_powi() {
   ret double %res
 }
 
+; Make sure that the type is correct after constant folding
+
+define half @pr98665() {
+; CHECK-LABEL: @pr98665(
+; CHECK-NEXT:    ret half 0xH3C00
+;
+  %x = call half @llvm.powi.f16.i32(half 0xH3C00, i32 1)
+  ret half %x
+}
+
 attributes #0 = { nofree nounwind willreturn }
-- 
2.47.0

