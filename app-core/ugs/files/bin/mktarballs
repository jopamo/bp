#!/bin/bash

WORKHOME="${HOME}/gnu_tarballs"
TEMPLOCATION="/tmp/gnu_tarballs"
REPO="/var/db/repos/bp"

usage() {
	echo "Usage: $0 [-p <package_name>] [-c <commit_hash>]"
	echo "  -p <package_name>   Specify a package name to update individually."
	echo "  -c <commit_hash>    Specify a commit hash for the selected package."
	exit 1
}

PACKAGE_NAME=""
COMMIT_HASH=""

while getopts "p:c:" opt; do
	case ${opt} in
		p )
			PACKAGE_NAME=$OPTARG
			;;
		c )
			COMMIT_HASH=$OPTARG
			;;
		* )
			usage
			;;
	esac
done

rename_ebuild_files() {
	local package_name="$1"
	local new_date="$2"
	local ebuild_file_path=$(find "${REPO}" -type f -name "${package_name}-*.ebuild")

	if [[ -n "$ebuild_file_path" ]]; then
		local ebuild_dir=$(dirname "$ebuild_file_path")
		local new_ebuild_file_name="${package_name}-${new_date}.ebuild"
		sudo cp "$ebuild_file_path" "${ebuild_dir}/${new_ebuild_file_name}"
		sudo rm "${ebuild_dir}/Manifest"
		echo "Renamed ebuild for ${package_name} to ${new_date}"
	else
		echo "No ebuild file found for ${package_name}"
	fi
}

finalize_update() {
	local package_path="$1"
	local package_name="$2"
	local new_ebuild_filename="$3"
	local version="$4"

	echo "Finalizing update for $package_name in $package_path"

	if ! (cd "$package_path" && pkgdev manifest); then
		echo "Error generating manifest for ${package_name}. Skipping..."
		return 1
	fi

	(cd "$package_path" && \
		git add --all . && \
		git -c user.name="${BOT_USER}" \
		-c user.email="${BOT_EMAIL}" \
		-c commit.gpgsign=true \
		-c user.signingkey="${BOT_KEYID}" \
		commit -m "Update ${package_name} to ${version}" && \
		git push origin HEAD)

	echo "Ebuild updated for ${package_name}: ${new_ebuild_filename}"
}

process_package() {
	local package_name="$1"
	local repo_url="$2"
	local commit_hash="$3"

	[ ! -d "${WORKHOME}/${package_name}" ] && git clone "${repo_url}" "${WORKHOME}/${package_name}" --depth 1
	[ -d "${WORKHOME}/${package_name}" ] && (cd "${WORKHOME}/${package_name}" && git fetch --all && git checkout ${commit_hash:-HEAD} && git reset --hard && git clean -f)

	local GITDATENAME="${package_name}-$(cd ${WORKHOME}/${package_name} && git log -n1 --pretty='format:%cd' --date=format:'%Y%m%d')"
	local new_snapshot_date=$(echo "$GITDATENAME" | sed -r 's/^[a-z-]+-([0-9]{8}).*$/\1/')

	if [ ! -f "${WORKHOME}/${GITDATENAME}.tar.xz" ]; then
		rm -rf "${WORKHOME}/${package_name}/gnulib"
		cp -rp "${WORKHOME}/gnulib" "${WORKHOME}/${package_name}/gnulib"
		chmod +w "${WORKHOME}/${package_name}/build-aux/ltmain.sh"

		(cd ${WORKHOME}/${package_name} && ./bootstrap --copy --skip-po || ./autogen.sh)

		(cd ${WORKHOME} && tar -hcf - ${package_name} | tar -xf - -C ${TEMPLOCATION})
		mv ${TEMPLOCATION}/${package_name} ${TEMPLOCATION}/${GITDATENAME}
		find ${TEMPLOCATION}/${GITDATENAME} -name *~ -delete
		(cd ${TEMPLOCATION}/${GITDATENAME} && rm -rf .git* gnulib autom4te.cache po/.reference)
		find ${TEMPLOCATION}/${GITDATENAME} -name *.git* -delete
		(cd ${TEMPLOCATION} && XZOPT=-e9 tar cJf ${WORKHOME}/${GITDATENAME}.tar.xz ${GITDATENAME} --owner=0 --group=0)
		sudo cp ${WORKHOME}/${GITDATENAME}.tar.xz /var/cache/distfiles/

		local ebuild_file_path=$(find "${REPO}" -type f -name "${package_name}-*.ebuild")
		local category=$(basename $(dirname $(dirname "${ebuild_file_path}")))
		rename_ebuild_files "$package_name" "$new_snapshot_date"
	fi
}

rm -rf "${TEMPLOCATION}"
mkdir -p "${WORKHOME}"
mkdir -p "${TEMPLOCATION}"
cd "${WORKHOME}"

[ ! -d "${WORKHOME}/coreutils" ] && git clone https://github.com/coreutils/coreutils.git "${WORKHOME}/coreutils" --depth 1
[ ! -d "${WORKHOME}/gnulib" ] && git clone https://github.com/coreutils/gnulib.git "${WORKHOME}/gnulib"

if [ -n "$PACKAGE_NAME" ]; then
	process_package "$PACKAGE_NAME" "https://git.savannah.gnu.org/git/$PACKAGE_NAME.git" "$COMMIT_HASH"
else
	packages=(
		"acl"
		"attr"
		"coreutils"
		"cpio"
		"diffutils"
		"findutils"
		"gperf"
		"grep"
		"grub"
		"libtool"
		"patch"
		"sed"
		"tar"
	)

	for package in "${packages[@]}"; do
		process_package "$package" "https://git.savannah.gnu.org/git/$package.git" "HEAD"
	done
fi

rm -rf "${TEMPLOCATION}"
