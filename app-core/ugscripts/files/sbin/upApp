#!/bin/bash

REPO_PATH="/var/db/repos/bp"

PROGNAME="upApp"

TMP_DIR="/tmp/${PROGNAME}"

DEBUG_LOG="${TMP_DIR}/${PROGNAME}-debug.log"
ERROR_LOG="${TMP_DIR}/${PROGNAME}-error.log"
JSON_LOG="${TMP_DIR}/${PROGNAME}-json.log"

mkdir -p "$TMP_DIR"
	: > "$ERROR_LOG"
	: > "$JSON_LOG"
	: > "$DEBUG_LOG"

handle_github() {
    local repo_url="$1"
    local repo_slug=$(echo "$repo_url" | sed -E 's|https?://github\.com/([^/]+/[^/]+).*|\1|')
    local encoded_slug=$(echo "$repo_slug" | sed 's/\//%2F/g')

    echo "repo_slug $repo_slug" >> "$DEBUG_LOG"
    echo "urlencode $encoded_slug" >> "$DEBUG_LOG"

    local releases_api_url="https://api.github.com/repos/$repo_slug/releases/latest"
    local tags_api_url="https://api.github.com/repos/$repo_slug/tags"
    local auth_header="Authorization: token $GITHUB_TOKEN"
    echo "auth_header $auth_header" >> "$DEBUG_LOG"

    local latest_release_info=$(curl -s -H "$auth_header" "$releases_api_url")
    local latest_version=$(echo "$latest_release_info" | jq -r '.tag_name')
    echo "api_url $releases_api_url" >> "$DEBUG_LOG"
    echo "latest_release_info $latest_release_info" >> "$JSON_LOG"
	echo "latest_version $latest_version" >> "$DEBUG_LOG"

    if [[ -z "$latest_version" || "$latest_version" == "null" ]]; then
        echo "No valid release found, checking tags..." >> "$DEBUG_LOG"
        local latest_tag_info=$(curl -s -H "$auth_header" "$tags_api_url" | jq -r '.[0].name')
        echo "api_url $tags_api_url" >> "$DEBUG_LOG"
        echo "latest_tag_info $latest_tag_info" >> "$JSON_LOG"

        if [[ -z "$latest_tag_info" || "$latest_tag_info" == "null" ]]; then
            echo "Failed to fetch latest tag info" >> "$ERROR_LOG"
            return 1
        else
            latest_version="$latest_tag_info"
        fi
    fi

    latest_version="${latest_version#v}"
    latest_version="${latest_version//_/\.}"

    echo "Successfully fetched version info: $latest_version" >> "$DEBUG_LOG"
    echo "$latest_version"
    return 0
}

handle_gitlab() {
    local repo_url="$1"
    local repo_slug=$(echo "$repo_url" | sed -E 's|https?://gitlab\.com/([^/]+/[^/]+).*|\1|')
    local encoded_slug=$(echo "$repo_slug" | sed 's/\//%2F/g')
    local api_url="https://gitlab.com/api/v4/projects/$encoded_slug/releases"
    local auth_header="Authorization: Bearer $GITLAB_TOKEN"
    local latest_release_info=$(curl -s -H "$auth_header" "$api_url" | jq '[.[] | select(.released_at)] | max_by(.released_at)')
    if [[ $? -ne 0 || -z "$latest_release_info" ]]; then
        echo "Failed to fetch latest release info"
        return 1
    else
        local latest_version=$(echo "$latest_release_info" | jq -r '.tag_name')
        echo "$latest_version"
    fi
}

update_github_package() {
    local category="$1"
    local package_name="$2"
    local repo_url="$3"
    local latest_version=$(handle_github "$repo_url")
    if [[ $? -eq 0 ]]; then
        update_ebuild "${category}/${package_name}" "${package_name}" "${latest_version}"
    else
        echo "Failed to update $package_name package" >> "$ERROR_LOG"
    fi
}

update_ebuild() {
    local package_path="${REPO_PATH}/$1"
    local package_name="$2"
    local latest_version="$3"

    local new_ebuild_filename="${package_name}-${latest_version}.ebuild"
    local new_ebuild_file="${package_path}/${new_ebuild_filename}"

    local ebuild_file=$(find "${package_path}" -type f -name "${package_name}-[0-9]*.ebuild" | sort -V | tail -n 1)

    local current_version=$(basename "$ebuild_file" | sed -e "s/^${package_name}-//" -e 's/\.ebuild$//')

    echo "Current version: $current_version, Latest version: $latest_version"

    if [[ "$current_version" == "$latest_version" ]]; then
        echo "No update needed for ${package_name} as it is already at the latest version: ${latest_version}."
        return
    fi

    if [[ -f "$new_ebuild_file" ]]; then
        echo "Ebuild file ${new_ebuild_filename} already exists. No update needed."
        return
    fi

    if [[ -z "$ebuild_file" ]]; then
        echo "No existing ebuild file found for ${package_name} at ${package_path}."
        return 1
    fi

    mv "$ebuild_file" "$new_ebuild_file"
    echo "New ebuild file created for ${package_name}: ${new_ebuild_filename}"

    if finalize_update "$package_path" "$package_name" "$new_ebuild_filename" "$latest_version"; then
        echo "Ebuild successfully updated for ${package_name}: ${new_ebuild_filename}"
    else
        echo "Failed to update ebuild for ${package_name}"
        return 1
    fi
}

update_gitlab_package() {
    local category="$1"
    local package_name="$2"
    local repo_url="$3"
    local latest_version=$(handle_gitlab "$repo_url")
    if [[ $? -eq 0 ]]; then
        update_ebuild "${category}/${package_name}" "$package_name" "$latest_version"
    else
        echo "Failed to update $package_name package"
    fi
}

finalize_update() {
	local package_path="$1"
	local package_name="$2"
	local new_ebuild_filename="$3"
	local version="$4"

	if ! (cd "$package_path" && pkgdev manifest); then
		echo "Error generating manifest for ${package_name}. Skipping..."
		return 1
	fi

	(cd "$package_path" && \
			git add --all . && \
			git -c user.name="${BOT_USER}" \
			-c user.email="${BOT_EMAIL}" \
			-c commit.gpgsign=true \
			-c user.signingkey="${BOT_KEYID}" \
			commit -m "Update ${package_name} to ${version}" && \
		git push origin HEAD)

	echo "Ebuild updated for ${package_name}: ${new_ebuild_filename}"
}

fetch_latest_gnu_version() {
	local base_url="https://ftp.gnu.org/gnu/$1/"
	local latest_version=$(curl -s "$base_url" | grep -oP 'href="\K'$1'-[0-9.]+(?=\.tar)' | \
			sed 's/'$1'-//g' | \
			sort -Vr | \
		head -1)
	if [[ -z "$latest_version" ]]; then
		echo "Failed to fetch the latest $1 version"
		return 1
	fi
	echo "$latest_version"
}

fetch_latest_cryptsetup_version() {
	local base_url="https://mirrors.edge.kernel.org/pub/linux/utils/cryptsetup/"
	local latest_version=$(curl -s "$base_url" | grep -oP 'href="v[0-9]+\.[0-9]+/' | grep -v -- "-rc" | sort -Vr | head -1 | cut -d '"' -f 2)

	if [[ -z "$latest_version" ]]; then
		echo "Failed to fetch the latest Cryptsetup version directory"
		return 1
	fi

	local version_page="${base_url}${latest_version}"
	local latest_final_version=$(curl -s "$version_page" | grep -oP 'cryptsetup-\K[0-9]+\.[0-9]+\.[0-9]+(?=\.tar\.gz)' | sort -Vr | head -1)

	if [[ -z "$latest_final_version" ]]; then
		echo "Failed to find the latest Cryptsetup final version"
		return 1
	fi

	echo "$latest_final_version"
}

update_gnu_package() {
	local package_name=$1
	local package_version=$(fetch_latest_gnu_version "$package_name")
	if [[ $? -eq 0 ]]; then
		update_ebuild "app-build/$package_name" "$package_name" "$package_version"
	fi
}

fetch_latest_git_version() {
	local repo_url="$1"
	local include_v_prefix="$2"

	local version_pattern='refs/tags/\K[0-9.]+(?=\^{})'
	if [[ "$include_v_prefix" == "true" ]]; then
		version_pattern='refs/tags/v\K[0-9.]+(?=\^{})'
	fi

	local latest_version=$(git ls-remote --tags --sort="-v:refname" "$repo_url" | \
			grep -oP "$version_pattern" | \
		head -1)

	if [[ -z "$latest_version" ]]; then
		echo "Failed to fetch the latest version from $repo_url"
		return 1
	fi

	echo "$latest_version"
}

update_git_package() {
	local category="$1"
	local package_name="$2"
	local repo_url="$3"
	local include_v_prefix="$4"

	local package_version=$(fetch_latest_git_version "$repo_url" "$include_v_prefix")
	if [[ $? -eq 0 ]]; then
		update_ebuild "${category}/${package_name}" "$package_name" "$package_version"
	else
		echo "Failed to update $package_name package"
	fi
}

cryptsetup_version=$(fetch_latest_cryptsetup_version)
[[ $? -eq 0 ]] && update_ebuild "app-fs/cryptsetup" "cryptsetup" "$cryptsetup_version"

if [[ $? -eq 0 ]]; then
	update_gnu_package "autoconf-archive"
	update_gnu_package "autoconf"
	update_gnu_package "automake"
	update_gnu_package "gettext"
	update_gnu_package "m4"
	update_gnu_package "bison"
	update_gnu_package "make"
	update_gnu_package "texinfo"
fi

update_git_package "app-net" "bluez" "https://git.kernel.org/pub/scm/bluetooth/bluez.git" "false"

update_github_package "app-core" "vim" "https://github.com/vim/vim"
update_github_package "app-util" "bc" "https://github.com/gavinhoward/bc"
update_github_package "lib-core" "ncurses" "https://github.com/ThomasDickey/ncurses-snapshots"
update_github_package "lib-core" "ncurses5-compat" "https://github.com/ThomasDickey/ncurses-snapshots"
update_github_package "lib-dev" "boost" "https://github.com/boostorg/boost"
update_github_package "lib-dev" "boost-build" "https://github.com/boostorg/boost"
update_github_package "app-net" "curl" "https://github.com/curl/curl"
