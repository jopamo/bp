#!/bin/bash

PACKAGES=(
	"aiodns"
	"aiofiles"
	"aiohappyeyeballs"
	"aiohttp"
	"aiosignal"
	"alabaster"
	"appdirs"
	"argcomplete"
	"arrow"
	"astor"
	"atomicwrites"
	"attrs"
	"autocommand"
	"babel"
	"backports-tarfile"
	"beautifulsoup4"
	"betamax"
	"black"
	"blinker"
	"boltons"
	"bottle"
	"brotlicffi"
	"build"
	"cachecontrol"
	"certifi"
	"cffi"
	"characteristic"
	"chardet"
	"charset-normalizer"
	"cherrypy"
	"click"
	"cloudpickle"
	"colorama"
	"configargparse"
	"configobj"
	"configupdater"
	"coverage"
	"cssselect"
	"cython"
	"defusedxml"
	"distlib"
	"distro"
	"docutils"
	"editables"
	"elementpath"
	"ensurepip-pip"
	"exceptiongroup"
	"execnet"
	"expandvars"
	"fastjsonschema"
	"fields"
	"filelock"
	"flaky"
	"flask"
	"flit"
	"flit-core"
	"fqdn"
	"freezegun"
	"frozenlist"
	"furo"
	"genty"
	"gpep517"
	"h11"
	"h2"
	"hatch-fancy-pypi-readme"
	"hatch-vcs"
	"hatchling"
	"hpack"
	"html5lib"
	"hypercorn"
	"hyperframe"
	"hypothesis"
	"idna"
	"imagesize"
	"immutables"
	"importlib-metadata"
	"incremental"
	"ini2toml"
	"iniconfig"
	"installer"
	"ipywidgets"
	"isoduration"
	"itsdangerous"
	"jaraco-collections"
	"jaraco-context"
	"jaraco-env"
	"jaraco-envs"
	"jaraco-functools"
	"jaraco-path"
	"jaraco-text"
	"josepy"
	"jinja2"
	"jsonpointer"
	"jsonschema"
	"jsonschema-path"
	"jsonschema-spec"
	"jsonschema-specifications"
	"js2py"
	"lark"
	"lazy-object-proxy"
	"lxml"
	"mako"
	"markdown"
	"markupsafe"
	"mock"
	"more-itertools"
	"msgpack"
	"multidict"
	"nbformat"
	"numpy"
	"olefile"
	"openpyxl"
	"ordered-set"
	"outcome"
	"packaging"
	"parsedatetime"
	"path"
	"pathspec"
	"pdm"
	"pdm-backend"
	"pexpect"
	"pip"
	"pip-run"
	"platformdirs"
	"pluggy"
	"ply"
	"poetry-core"
	"portend"
	"pretend"
	"propcache"
	"psutil"
	"py"
	"pycares"
	"pycparser"
	"pyelftools"
	"pyfakefs"
	"pygments"
	"pyopenssl"
	"pyproject-hooks"
	"pyproject-metadata"
	"pypiserver"
	"pyrfc3339"
	"pysocks"
	"pytest"
	"pytest-cov"
	"pytest-home"
	"pytest-timeout"
	"pytest-xdist"
	"python-dateutil"
	"pytz"
	"pyxdg"
	"pyyaml"
	"quart"
	"referencing"
	"regex"
	"requests"
	"requests-toolbelt"
	"resolvelib"
	"rfc3339-validator"
	"rfc3986-validator"
	"rfc3987"
	"rich"
	"rpds-py"
	"scripttest"
	"selenium"
	"semantic-version"
	"six"
	"snakeoil"
	"sniffio"
	"sortedcontainers"
	"soupsieve"
	"sphinx"
	"strict-rfc3339"
	"testpath"
	"tomli"
	"tomli-w"
	"tomlkit"
	"tornado"
	"towncrier"
	"tqdm"
	"trio"
	"trio-websocket"
	"trove-classifiers"
	"trustme"
	"truststore"
	"typing-extensions"
	"uri-template"
	"urllib3"
	"uv"
	"virtualenv"
	"webcolors"
	"websocket-client"
	"werkzeug"
	"wheel"
	"wsproto"
	"xmlschema"
	"yarl"
	"zipp"
	"zstandard"
)

declare -A replacements=(
	["app-arch/brotli"]="app-compression/brotli"
	["app-misc/ca-certificates"]="lib-net/ca-certificates"
	["dev-libs/libffi"]="lib-core/libffi"
	["dev-libs/libxml2"]="lib-core/libxml2"
	["dev-libs/libxslt"]="lib-core/libxslt"
	["dev-libs/libyaml"]="lib-dev/libyaml"
	["dev-libs/openssl"]="lib-net/openssl"
	["dev-libs/tree-sitter"]="lib-dev/tree-sitter"
	["dev-python/cryptography"]="app-crypto/cryptography"
	["dev-python/pillow"]="xgui-app/pillow"
	["dev-python/jinja"]="dev-py/jinja"
	["dev-python/setuptools"]="dev-py/setuptools"
	["dev-python/setuptools-rust"]="dev-py/setuptools-rust"
	["dev-python/setuptools-scm"]="dev-py/setuptools-scm"
	["dev-python/snakeoil"]="dev-py/snakeoil"
	["dev-python/tree-sitter"]="dev-py/tree-sitter"
	["net-dns/c-ares"]="lib-net/c-ares"
	["sys-libs/timezone-data"]="lib-core/tzdb"
)

BDEPEND_CLEAN_PACKAGES=(
	"pyproject-metadata"
)

GENTOO_PATH="/tmp/gentoo-repo"
PACKAGE_DIR="/var/db/repos/bp/dev-python"
REPO="https://github.com/gentoo/gentoo.git"

finalize_update() {
	local package_path="$1"
	local package_name="$2"
	local new_ebuild_filename="$3"
	local version="$4"

	if ! (cd "$package_path" && pkgdev manifest); then
		echo "Error generating manifest for ${package_name}. Skipping..."
		return 1
	fi

	(cd "$package_path" && \
			git add --all . > /dev/null 2>&1 && \
			git -c user.name="${BOT_USER}" \
			-c user.email="${BOT_EMAIL}" \
			-c commit.gpgsign=true \
			-c user.signingkey="${BOT_KEYID}" \
			commit -m "Update ${package_name} to ${version}" > /dev/null 2>&1 && \
		git push origin HEAD > /dev/null 2>&1)

	echo "Ebuild updated for ${package_name}: ${new_ebuild_filename}"
}

echo "Starting script execution..."
echo "Removing the existing ${PACKAGE_DIR} directory to start fresh..."
rm -rf "${PACKAGE_DIR}"

echo "Creating directory at ${PACKAGE_DIR}..."
mkdir -p "${PACKAGE_DIR}"
echo "Directory created or already exists."

if [ -d "${GENTOO_PATH}" ]; then
	echo "Updating the Gentoo package repository in ${GENTOO_PATH}..."
	cd "${GENTOO_PATH}" && git pull
else
	echo "Cloning the Gentoo package repository to ${GENTOO_PATH}..."
	git clone "${REPO}" "${GENTOO_PATH}" --depth 1
fi

echo "Repository setup complete."

echo "Starting package copy process..."

for package in "${PACKAGES[@]}"; do
	src_path="${GENTOO_PATH}/dev-python/${package}"
	dest_path="${PACKAGE_DIR}/${package}"

	echo "Processing ${package}..."
	if [ -d "${src_path}" ]; then
		echo "Copying ${package} from ${src_path} to ${dest_path}..."
		cp -R "${src_path}" "${dest_path}"
		echo "Copy complete for ${package}."
	else
		echo "Package dev-python/${package} not found in the repository."
	fi
done

echo "Package copy process completed."
#######################################################################################################

#######################################################################################################
echo "Starting cleanup process..."

[ -d "${PACKAGE_DIR}/gpep517" ] && echo "Updating EAPI for gpep517..." && find "${PACKAGE_DIR}/gpep517" -type f -name "*.ebuild" -exec sed -i'' 's/EAPI=7/EAPI=8/' {} + && echo "EAPI updated for gpep517."

echo "Removing files ending with 9999.ebuild in ${PACKAGE_DIR}..."
find "${PACKAGE_DIR}" -type f -name '*9999.ebuild' -exec echo "Deleting {}" \; -delete

echo "Removing lines containing 'Gentoo Authors' from files in ${PACKAGE_DIR}..."
find "${PACKAGE_DIR}" -type f -exec sed -i'' '/Gentoo Authors/d' {} \;

echo "Removing metadata.xml files from ${PACKAGE_DIR}..."
find "${PACKAGE_DIR}" -type f -name 'metadata.xml' -exec echo "Deleting {}" \; -delete

find "${PACKAGE_DIR}" -type f -name "*.ebuild" -exec sed -i'' '/newbashcomp/d' {} +

find "${PACKAGE_DIR}" -type f -name "*.ebuild" -exec sed -i'' 'N;/^\n$/!P;D' {} +

find "${PACKAGE_DIR}" -type f -name "*.ebuild" -exec sed -i'' \
	-e '/dev-vcs\/mercurial/d' \
	-e '/dev-vcs\/git/d' {} +

find "${PACKAGE_DIR}" -type f -name "*.ebuild" -exec perl -i'' -0777 -pe '
    s/!sparc\?\s*\(([^()]|\n)*\)//g;
' {} +

find "${PACKAGE_DIR}" -type f -name "*.ebuild" -exec perl -i'' -0777 -pe '
    s/!hppa\?\s*\(([^()]|\n)*\)//g;
' {} +

find "${PACKAGE_DIR}" -type f -name "*.ebuild" -exec sed -i'' '/!hppa? (/,+4d' {} +

find "${PACKAGE_DIR}" -type f -name "*.ebuild" -exec perl -i'' -0777 -pe '
    s/!s390\?\s*\(([^()]|\n)*\)//g;
' {} +

find "${PACKAGE_DIR}" -type f -name "*.ebuild" -exec perl -i'' -0777 -pe '
    s/test\?\s*\(\s*\)//g;
' {} +

find "${PACKAGE_DIR}" -type f -name "*.ebuild" -exec perl -i'' -0777 -pe '
    s/test-rust\?\s*\(\s*\)//g;
' {} +

find "${PACKAGE_DIR}" -type f -name '*_rc[1-9].ebuild' -exec echo "Deleting _rc ebuild: {}" \; -delete
find "${PACKAGE_DIR}" -type f -name '*_pre*.ebuild' -exec echo "Deleting _pre ebuild: {}" \; -delete
#######################################################################################################

#######################################################################################################
echo "Removing BDEPEND blocks from selected packages..."
for package in "${BDEPEND_CLEAN_PACKAGES[@]}"; do
	find "${PACKAGE_DIR}/${package}" -type f -name "*.ebuild" -exec perl -i'' -0777 -pe 's/BDEPEND=".*?"//gs' {} +
done
#######################################################################################################

#######################################################################################################
echo "Starting to process to add -Wl,-z,defs to required packages..."
for package in aiohttp brotlicffi cffi cython frozenlist lxml markupsafe multidict pillow \
propcache psutil pycares regex tree-sitter yarl zstandard; do
	if [ -d "${PACKAGE_DIR}/${package}" ]; then
		echo "Updating for ${package}..."
		find "${PACKAGE_DIR}/${package}" -type f -name "*.ebuild" -print0 | while IFS= read -r -d '' ebuild_file; do
			echo "Processing $ebuild_file"
			for func in python_compile src_prepare src_unpack python_configure_all python_install_all; do
				if grep -q "^${func}()" "$ebuild_file"; then
					echo "Adding line to $func in $ebuild_file"
					sed -i "/^${func}()/ { N; s|\\n|\\n\\tfilter-flags -Wl,-z,defs\\n| }" "$ebuild_file"
				fi
			done
			echo "Updated $ebuild_file."
		done
	else
		echo "Directory for ${package} not found."
	fi
done
#######################################################################################################

#######################################################################################################
echo "Starting to process each package to keep only the latest ebuild..."

for package in "${PACKAGES[@]}"; do
	package_dir="${PACKAGE_DIR}/${package}"
	if [ -d "${package_dir}" ]; then
		echo "Processing ${package} in ${package_dir}..."

		find "${package_dir}" -type f -name "*.ebuild" | sort -V | head -n -1 | while read ebuild; do
			echo "Deleting old ebuild: ${ebuild}"
			rm "${ebuild}"
		done

		echo "Cleanup of old ebuilds complete for ${package}."
	else
		echo "Directory ${package_dir} not found."
	fi
done

echo "All packages processed, and old ebuilds removed."

echo "Starting to update KEYWORDS in ebuild files..."
for package in "${PACKAGES[@]}"; do
	package_dir="${PACKAGE_DIR}/${package}"
	if [ -d "${package_dir}" ]; then
		echo "Processing ${package} in ${package_dir}..."
		echo "Updating KEYWORDS for ${package} in ${package_dir}..."
		find "${package_dir}" -type f -name "*.ebuild" -exec sed -i'' '/^KEYWORDS=/ s/^KEYWORDS=".*"/KEYWORDS="amd64 arm64"/g' {} +
		echo "KEYWORDS updated for ${package}."
	fi
done

for package in "${PACKAGES[@]}"; do
	package_dir="${PACKAGE_DIR}/${package}"
	if [ -d "${package_dir}" ]; then
		for old_text in "${!replacements[@]}"; do
			new_text="${replacements[$old_text]}"
			echo "Replacing '${old_text}' with '${new_text}' in ${package_dir}..."
			find "${package_dir}" -type f -name "*.ebuild" -exec sed -i'' "s|${old_text}|${new_text}|g" {} +
		done
		echo "Text replacements completed for ${package}."
	fi
done

remove_strings=('bash-completion-r1' 'optfeature' 'virtualx' 'fortran-2' 'check-reqs')

for package in "${PACKAGES[@]}"; do
	package_dir="${PACKAGE_DIR}/${package}"
	if [ -d "${package_dir}" ]; then
		echo "Processing ${package} in ${package_dir} for string removals..."
		find "${package_dir}" -type f -name "*.ebuild" -print0 | while IFS= read -r -d '' ebuild_file; do
			echo "Updating ${ebuild_file}..."
			for remove_string in "${remove_strings[@]}"; do
				sed -i'' -e "s/[[:space:]]*${remove_string}[[:space:]]*/ /g" \
					-e '/^inherit[[:space:]]*$/d' "${ebuild_file}"
			done
		done
		echo "String removals completed for ${package}."
	fi
done

generate_manifest() {
	local package=$1
	local package_path="${PACKAGE_DIR}/${package}"

	if [ -d "${package_path}" ]; then
		ebuild --force "${package_path}"/*.ebuild manifest
	fi
}

commit_changes() {
	local package=$1
	local package_path="${PACKAGE_DIR}/${package}"

	echo "Committing changes for package: ${package}"

	local ebuild_file=$(find "${package_path}" -type f -name "${package}*.ebuild" | head -n 1)
	if [[ -z "$ebuild_file" ]]; then
		echo "Ebuild file not found for ${package}"
		return 1
	fi

	local filename=$(basename "$ebuild_file")
	local version=$(echo $filename | sed -r "s/^${package}-([0-9]+(\.[0-9]+)*(_p[0-9]+)?(-r[0-9]+)?)\.ebuild$/\1/")

	if [[ -z "$version" || "$version" == "$filename" ]]; then
		echo "Version extraction failed for ${package}"
		return 1
	fi

	echo "Version found: ${version}"

	finalize_update "${package_path}" "${package}" "${filename}" "${version}"
}

main() {
	echo "Starting script execution..."

	for package in "${PACKAGES[@]}"; do
		echo "Processing package: ${package}"
		generate_manifest "${package}" || { echo "Failed to generate manifest for ${package}"; return 1; }
		commit_changes "${package}" || { echo "Failed to commit changes for ${package}"; continue; }
	done


	rm -rf "${GENTOO_PATH}"
	echo "Script execution finished."
}

main "$@"
