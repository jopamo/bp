#!/bin/bash

REPO_PATH="/var/db/repos/bp"
REPO_TEMP_DIR="/tmp/repo_temp"

GCC_MAJOR_VERSION="12"
BINUTILS_VERSION="2.41"
BINUTILS_BRANCH="binutils-$(echo "$BINUTILS_VERSION" | sed 's/\./_/')-branch"
XZ_UTILS_VERSION="5.4"
DBUS_VERSION="1.15"
SYSTEMD_VERSION="254"
UTIL_LINUX_VERSION="2.40"
OPENSSL_VERSION="3.1"
NODEJS_VERSION="20"
BIND_TOOLS_VERSION="9.18"
GAWK_VERSION="5.3"
PYTHON_VERSION="3.12"
PERL_VERSION="5.38"
TCL_VERSION="8.6"
TCL_BRANCH=$(echo "core-${TCL_VERSION}" | tr '.' '-')

show_help() {
	echo "Usage: $0 [options]"
	echo ""
	echo "Options:"
	echo "  --update-toolchain Update the toolchain ebuilds (GCC, Binutils, Glibc, etc.)"
	echo "  --unsafe		   Update packages marked as unsafe"
	echo "  --help			 Display this help and exit"
	echo ""
	echo "Without any options, the script updates all ebuilds except for toolchain and unsafe packages."
}

update_toolchain=false
update_unsafe=false

set -e

while [[ $# -gt 0 ]]; do
	case $1 in
		--update-toolchain)
			update_toolchain=true
			shift
			;;
		--unsafe)
			update_unsafe=true
			shift
			;;
		--help)
			show_help
			exit 0
			;;
		*)
			echo "Unknown option: $1"
			show_help
			exit 1
			;;
	esac
done

get_gcc_minor_version() {
	local major_version="$1"
	local gcc_page=$(curl -s "https://gcc.gnu.org/gcc-${major_version}/")
	local minor_version=$(echo "$gcc_page" | grep -oP "GCC ${major_version}\.\K[0-9]+" | head -1)
	echo "${major_version}.${minor_version}"
}

clone_or_update_repo() {
	local repo_uri="$1"
	local target_dir="$2"
	local branch="$3"
	local version_pattern="$4"
	local max_versions_to_check=1  # Since we only want the latest, set this to 1

	# Clone or update the repository
	if [[ -d "$target_dir" ]]; then
		(cd "$target_dir" && git fetch --all --tags && git reset --hard "origin/$branch")
	else
		git clone --depth 1 --branch "$branch" "$repo_uri" "$target_dir"
	fi

	# Fetch the latest tag, remove the leading 'v', and store it
	latest_version=$(cd "$target_dir" && git tag -l | grep -oP "$version_pattern" | sort -rV | head -n "$max_versions_to_check" | sed 's/^v//')
}

update_ebuild() {
	local package_path="$1"
	local repo_uri="$2"
	local branch="$3"
	local version_name="$4"
	local use_date_only="$5"
	local repo_temp_dir="${REPO_TEMP_DIR}/$(basename "$package_path")" # Extract package name from path

	echo "Updating $(basename "$package_path")..."

	# Check if repo has been cloned already, if not, clone or update
	if [[ ! -d "$repo_temp_dir" ]]; then
		clone_or_update_repo "$repo_uri" "$repo_temp_dir" "$branch" "v\d+\.\d+"
	fi

	# Fetch the latest commit hash and date from the cloned repository
	latest_commit=$(cd "$repo_temp_dir" && git rev-parse HEAD)
	latest_commit_date=$(cd "$repo_temp_dir" && git log -n1 --pretty=format:%cd --date=format:%Y%m%d)

	if [[ -z "$latest_commit" ]] || [[ -z "$latest_commit_date" ]]; then
		echo "Failed to fetch latest commit or date from Git repository: $repo_uri"
		return 1
	fi

	echo "Latest commit: $latest_commit"
	echo "Latest commit date: $latest_commit_date"

	# Find the current ebuild file
	local ebuild_file=$(find "$package_path" -maxdepth 1 -type f -name "${PACKAGE_NAME}-*.ebuild" | sort | tail -n 1)
	if [[ -z "$ebuild_file" ]]; then
		echo "No ebuild file found for ${PACKAGE_NAME}."
		return 1
	fi

	# Update the SNAPSHOT variable in the ebuild file
	sed -i "s/SNAPSHOT=.*/SNAPSHOT=${latest_commit}/" "$ebuild_file"

	# Construct new ebuild filename
	local version
	if [[ "$use_date_only" == "yes" ]]; then
		version="${latest_commit_date}"
	else
		version="${version_name}.${latest_commit_date}"
	fi

	local new_ebuild_filename="${PACKAGE_NAME}-${version}.ebuild"
	local new_ebuild_file="${package_path}/${new_ebuild_filename}"

	if [[ -f "$new_ebuild_file" ]]; then
		echo "Ebuild file ${new_ebuild_filename} is already latest."
		return 0
	fi

	mv "$ebuild_file" "$new_ebuild_file"
	(cd "$REPO_PATH" && repoman manifest)
	(cd "$REPO_PATH" && \
		git -c user.name="1g4-bot" \
			-c user.email="share@1g4.org" \
			-c commit.gpgsign=true \
			-c user.signingkey=AFFCE613154C05AA \
			add . && \
		git -c user.name="1g4-bot" \
			-c user.email="share@1g4.org" \
			-c commit.gpgsign=true \
			-c user.signingkey=AFFCE613154C05AA \
			commit -m "Update ${PACKAGE_NAME} to ${version}" && \
		git push)

	echo "Ebuild updated for ${PACKAGE_NAME}: ${new_ebuild_filename}"
}

if [[ $update_toolchain == true ]]; then
    GCC_VERSION=$(get_gcc_minor_version "$GCC_MAJOR_VERSION")

    update_ebuild "${REPO_PATH}/app-build/gcc" "https://github.com/gcc-mirror/gcc" "releases/gcc-${GCC_MAJOR_VERSION}" "$GCC_VERSION" "no"

    BINUTILS_BRANCH="binutils-$(echo "$BINUTILS_VERSION" | sed 's/\./_/')-branch"
    update_ebuild "${REPO_PATH}/app-build/binutils" "https://git.linaro.org/toolchain/binutils-gdb" "$BINUTILS_BRANCH" "$BINUTILS_VERSION" "no"
    update_ebuild "${REPO_PATH}/app-compression/xz-utils" "https://github.com/tukaani-project/xz" "v${XZ_UTILS_VERSION}" "$XZ_UTILS_VERSION" "no"
    update_ebuild "${REPO_PATH}/app-compression/zstd" "https://github.com/facebook/zstd" "dev" "0" "yes"
    update_ebuild "${REPO_PATH}/app-compression/lz4" "https://github.com/lz4/lz4" "dev" "0" "yes"
fi

if [[ $update_unsafe == true ]]; then
    update_ebuild "${REPO_PATH}/app-fs/efibootmgr" "https://github.com/rhinstaller/efibootmgr" "main" "0" "yes"
fi

# version set
update_ebuild "${REPO_PATH}/app-core/dbus" "https://gitlab.freedesktop.org/dbus/dbus" "dbus-${DBUS_VERSION}" "$DBUS_VERSION" "no"
update_ebuild "${REPO_PATH}/app-core/gawk" "https://git.savannah.gnu.org/git/gawk" "gawk-${GAWK_VERSION}-stable" "$GAWK_VERSION" "no"
update_ebuild "${REPO_PATH}/app-core/systemd" "https://github.com/systemd/systemd-stable" "v${SYSTEMD_VERSION}-stable" "$SYSTEMD_VERSION" "no"
update_ebuild "${REPO_PATH}/app-core/util-linux" "https://github.com/util-linux/util-linux" "stable/v${UTIL_LINUX_VERSION}" "$UTIL_LINUX_VERSION" "no"
update_ebuild "${REPO_PATH}/app-lang/perl" "https://github.com/Perl/perl5" "${PERL_VERSION}" "$PERL_VERSION" "no"
update_ebuild "${REPO_PATH}/app-lang/python" "https://github.com/python/cpython" "${PYTHON_VERSION}" "$PYTHON_VERSION" "no"
update_ebuild "${REPO_PATH}/app-lang/yasm" "https://github.com/yasm/yasm" "master" "0" "yes"
update_ebuild "${REPO_PATH}/app-net/bind-tools" "https://github.com/isc-projects/bind9" "bind-${BIND_TOOLS_VERSION}" "$BIND_TOOLS_VERSION" "no"
update_ebuild "${REPO_PATH}/app-server/nodejs" "https://github.com/nodejs/node" "v${NODEJS_VERSION}.x" "$NODEJS_VERSION" "no"
update_ebuild "${REPO_PATH}/dev-lang/tcl" "https://github.com/tcltk/tcl" "${TCL_BRANCH}-branch" "$TCL_VERSION" "no"
update_ebuild "${REPO_PATH}/lib-net/openssl" "https://github.com/openssl/openssl" "openssl-${OPENSSL_VERSION}" "$OPENSSL_VERSION" "no"

#: '
update_ebuild "${REPO_PATH}/app-build/gnuconfig" "https://git.savannah.gnu.org/git/config" "master" "0" "yes"
update_ebuild "${REPO_PATH}/app-core/file" "https://github.com/file/file" "master" "0" "yes"
update_ebuild "${REPO_PATH}/app-core/git" "https://github.com/git/git" "maint" "0" "yes"
update_ebuild "${REPO_PATH}/app-core/kmod" "https://github.com/kmod-project/kmod" "master" "0" "yes"
update_ebuild "${REPO_PATH}/app-core/lsof" "https://github.com/lsof-org/lsof" "master" "0" "yes"
update_ebuild "${REPO_PATH}/app-core/procps" "https://gitlab.com/procps-ng/procps" "master" "0" "yes"
update_ebuild "${REPO_PATH}/app-crypto/jitterentropy" "https://github.com/smuellerDD/jitterentropy-library" "master" "0" "yes"
update_ebuild "${REPO_PATH}/app-crypto/rng-tools" "https://github.com/nhorman/rng-tools" "master" "0" "yes"
update_ebuild "${REPO_PATH}/app-dev/repo" "https://github.com/GerritCodeReview/git-repo" "stable" "0" "yes"
update_ebuild "${REPO_PATH}/app-fs/dosfstools" "https://github.com/dosfstools/dosfstools" "master" "0" "yes"
update_ebuild "${REPO_PATH}/app-fs/e2fsprogs" "https://git.kernel.org/pub/scm/fs/ext2/e2fsprogs" "maint" "0" "yes"
update_ebuild "${REPO_PATH}/app-fs/efivar" "https://github.com/rhboot/efivar" "main" "0" "yes"
update_ebuild "${REPO_PATH}/app-fs/mdadm" "https://git.kernel.org/pub/scm/utils/mdadm/mdadm" "master" "0" "yes"
update_ebuild "${REPO_PATH}/app-fs/ntfs3g" "https://github.com/tuxera/ntfs-3g" "edge" "0" "yes"
update_ebuild "${REPO_PATH}/app-fs/smartmontools" "https://github.com/smartmontools/smartmontools" "master" "0" "yes"
update_ebuild "${REPO_PATH}/app-lang/yasm" "https://github.com/yasm/yasm" "master" "0" "yes"
update_ebuild "${REPO_PATH}/app-net/chrony" "https://gitlab.com/chrony/chrony" "master" "0" "yes"
update_ebuild "${REPO_PATH}/app-net/cyrus-sasl" "https://github.com/cyrusimap/cyrus-sasl" "master" "0" "yes"
update_ebuild "${REPO_PATH}/app-net/iproute2" "https://github.com/iproute2/iproute2" "main" "0" "yes"
update_ebuild "${REPO_PATH}/app-net/networkmanager" "https://github.com/NetworkManager/NetworkManager" "main" "0" "yes"
update_ebuild "${REPO_PATH}/lib-core/expat" "https://github.com/libexpat/libexpat" "master" "0" "yes"
update_ebuild "${REPO_PATH}/lib-dev/maxminddb" "https://github.com/maxmind/libmaxminddb" "main" "0" "yes"
update_ebuild "${REPO_PATH}/xgui-misc/ff2mpv" "https://github.com/woodruffw/ff2mpv" "master" "0" "yes"
update_ebuild "${REPO_PATH}/xmedia-live-app/mpv" "https://github.com/mpv-player/mpv" "master" "0" "yes"
#'
