diff -urN a/lib/portage/_emirrordist/Config.py b/lib/portage/_emirrordist/Config.py
--- a/lib/portage/_emirrordist/Config.py	2020-04-19 12:28:42.525470363 -0500
+++ b/lib/portage/_emirrordist/Config.py	2020-04-19 12:31:26.073937406 -0500
@@ -10,7 +10,6 @@
 
 import portage
 from portage import os
-from portage.package.ebuild.fetch import MirrorLayoutConfig
 from portage.util import grabdict, grablines
 from portage.util._ShelveUnicodeWrapper import ShelveUnicodeWrapper
 
@@ -73,13 +72,6 @@
 			self.deletion_db = self._open_shelve(
 				options.deletion_db, 'deletion')
 
-		self.layout_conf = MirrorLayoutConfig()
-		if options.layout_conf is None:
-			options.layout_conf = os.path.join(self.distfiles,
-					'layout.conf')
-		self.layout_conf.read_from_file(options.layout_conf)
-		self.layouts = self.layout_conf.get_all_layouts()
-
 	def _open_log(self, log_desc, log_path, mode):
 
 		if log_path is None or self.options.dry_run:
diff -urN a/lib/portage/package/ebuild/fetch.py b/lib/portage/package/ebuild/fetch.py
--- a/lib/portage/package/ebuild/fetch.py	2020-04-19 12:28:42.553470443 -0500
+++ b/lib/portage/package/ebuild/fetch.py	2020-04-19 12:38:34.641366922 -0500
@@ -453,24 +453,13 @@
 
 	def get_best_supported_layout(self):
 		for val in self.structure:
-			if self.validate_structure(val):
-				if val[0] == 'flat':
-					return FlatLayout(*val[1:])
-				elif val[0] == 'filename-hash':
-					return FilenameHashLayout(*val[1:])
-		else:
-			# fallback
 			return FlatLayout()
 
 	def get_all_layouts(self):
 		ret = []
 		for val in self.structure:
 			if not self.validate_structure(val):
-				raise ValueError("Unsupported structure: {}".format(val))
-			if val[0] == 'flat':
 				ret.append(FlatLayout(*val[1:]))
-			elif val[0] == 'filename-hash':
-				ret.append(FilenameHashLayout(*val[1:]))
 		if not ret:
 			ret.append(FlatLayout())
 		return ret
@@ -498,26 +487,8 @@
 			pass
 
 	ts, data = cache.get(mirror_url, (0, None))
-	# refresh at least daily
-	if ts >= time.time() - 86400:
-		mirror_conf.deserialize(data)
-	else:
-		tmpfile = '.layout.conf.%s' % urlparse(mirror_url).hostname
-		try:
-			if fetch({tmpfile: (mirror_url + '/distfiles/layout.conf',)},
-					mysettings, force=1, try_mirrors=0):
-				tmpfile = os.path.join(mysettings['DISTDIR'], tmpfile)
-				mirror_conf.read_from_file(tmpfile)
-			else:
-				raise IOError()
-		except (ConfigParserError, IOError, UnicodeDecodeError):
-			pass
-		else:
-			cache[mirror_url] = (time.time(), mirror_conf.serialize())
-			if cache_path is not None:
-				f = atomic_ofstream(cache_path, 'w')
-				json.dump(cache, f)
-				f.close()
+
+	mirror_conf.deserialize(data)
 
 	return (mirror_url + "/distfiles/" +
 			mirror_conf.get_best_supported_layout().get_path(filename))
