#!/bin/bash

[[ $- != *i* ]] && return

shopt -s checkwinsize
shopt -s no_empty_cmd_completion
shopt -s histappend
shopt -s globstar

PROMPT_COMMAND=(
	'history -a'
	'history -n'
	'history -r'
)

case "$TERM" in
	*term*|rxvt*|gnome*|kitty*|lxterm*|tmux|qterminal*)
		PS1='\[\e]0;\u@\h:\w\007\]'
		;;
	screen*)
		PS1='\[\033k\u@\h:\w\033\\\]'
		;;
	*)
		PS1=""
		;;
esac

if command -v dircolors >/dev/null; then
	if [[ -f ~/.ls_colors ]]; then
		eval "$(dircolors -b ~/.ls_colors)"
	elif [[ -f /etc/LS_COLORS ]]; then
		eval "$(dircolors -b /etc/LS_COLORS)"
	else
		eval "$(dircolors -b)"
	fi
	use_color=true
elif [[ "$TERM" =~ (term|rxvt|gnome|kitty|lxterm|screen|tmux|cons25|color) ]]; then
	use_color=true
else
	use_color=false
fi

if [[ "$use_color" == true ]]; then
	if (( EUID == 0 )); then
		PS1+='\[\033[0;31m\]\u\[\033[1;37m\]@\[\033[0;91m\]\h \[\033[1;34m\]\w \[\033[0;37m\]# \[\033[0m\]'
	else
		PS1+='\[\033[0;32m\]\u\[\033[1;37m\]@\[\033[0;92m\]\h \[\033[1;34m\]\w \[\033[0;37m\]\$ \[\033[0m\]'
	fi
else
	PS1+='\u@\h \w \$ '
fi

for d in /etc/bash/bashrc.d ~/.bashrc.d; do
	[[ -d $d ]] && for f in "$d"/*.sh; do
		[[ -r $f ]] && source "$f"
	done
done

if [[ -f /etc/profile.d/vte.sh ]]; then
	source /etc/profile.d/vte.sh
else
	__vte_osc7() { printf "\033]7;file://%s%s\033\\" "${HOSTNAME}" "${PWD}"; }
	PROMPT_COMMAND="__vte_osc7; $PROMPT_COMMAND"
fi

if command -v clang >/dev/null 2>&1; then
	export TUPLE=$(clang --print-target-triple)
elif command -v gcc >/dev/null 2>&1; then
	export TUPLE=$(gcc -dumpmachine)
else
	echo "No suitable compiler found." >&2
	unset TUPLE
fi

export HISTSIZE=100000

export SSH_AUTH_SOCK="${XDG_RUNTIME_DIR}/ssh-agent.socket"
export GPG_TTY=$(tty)

bind 'set bell-style none'
bind 'set colored-stats on'
bind 'set completion-ignore-case on'
bind 'set completion-prefix-display-length 3'
bind 'set convert-meta off'
bind 'set horizontal-scroll-mode off'
bind 'set input-meta on'
bind 'set mark-symlinked-directories on'
bind 'set meta-flag on'
bind 'set output-meta on'
bind 'set show-all-if-ambiguous on'
bind 'set show-all-if-unmodified on'
bind 'set visible-stats on'
bind '"\e[1~": beginning-of-line'
bind '"\e[2~": quoted-insert'
bind '"\e[3~": delete-char'
bind '"\e[4~": end-of-line'
bind '"\e[5~": history-search-backward'
bind '"\e[6~": history-search-forward'
bind '"\eOc": forward-word'
bind '"\eOd": backward-word'
bind '"\eOF": end-of-line'
bind '"\eOH": beginning-of-line'

unset use_color sh

declare -A formatters=(
	["*.c"]="clang-format -i"
	["*.h"]="clang-format -i"
	["*.cpp"]="clang-format -i"
	["*.hpp"]="clang-format -i"
	["*.py"]="black"
	["*.sh"]="beautysh -t"
	["*.js"]="prettier --write"
	["*.ts"]="prettier --write"
	["*.java"]="clang-format -i"
	["*.go"]="gofmt -w"
)

alias ......='cd ../../../../..'
alias .....='cd ../../../..'
alias ....='cd ../../..'
alias ...='cd ../..'
alias ..='cd ..'
alias expand='expand -t2'
alias unexpand='unexpand -t2'
alias imginfo="identify -format '-- %f -- \nType: %m\nSize: %b bytes\nResolution: %wpx x %hpx\nColors: %k'"
alias imgres="identify -format '%wx%h\n'"
alias k5='kill -9 %%'
alias ls='ls --color=auto -h'
alias lf='ls --color=auto -ap | grep -v /'
alias ll='ls --color=auto -lah'
alias grep='grep --colour=auto'
alias egrep='egrep --colour=auto'
alias fgrep='fgrep --colour=auto'
alias list-ssh='ps ax | grep "ssh" | grep -v grep'
alias t='tail'
alias h='history'
alias j='jobs -l'
alias path='echo -e ${PATH//:/\\n}'
alias ping='ping -c 5'
alias fastping='ping -c 1000 -f'
alias meminfo='free -m -l -t'
alias psmem='ps auxf | sort -nr -k 4'
alias psmem10='ps auxf | sort -nr -k 4 | head -10'
alias pscpu='ps auxf | sort -nr -k 3'
alias pscpu10='ps auxf | sort -nr -k 3 | head -10'
alias wget='wget -c'
alias df='df -HT'
alias du='du -ch --max-depth=1'
alias rsync='rsync -apvz'
alias sha3-256='openssl dgst -sha3-256'
alias sha3-512='openssl dgst -sha3-512'
alias weather='curl wttr.in'
alias memfree='sync; echo 3 > /proc/sys/vm/drop_caches; free -m'

random_string() {
	[ -z "$1" ] && echo "Usage: random_string <length>" && return 1
	tr -dc A-Za-z0-9 </dev/urandom | head -c "$1" ; echo
}

sort_and_remove_duplicates() {
	if [ -f "$1" ]; then
		temp_file=$(mktemp)
		if sort "$1" | uniq > "$temp_file" && [ -s "$temp_file" ]; then
			mv "$temp_file" "$1"
		else
			echo "Failed to sort and remove duplicates or file is empty after processing."
			rm "$temp_file"
		fi
	else
		echo "File not found: $1"
	fi
}

replace_in_files() {
	local search_string="$1"
	local replacement_string="$2"
	local start_directory="${3:-.}"
	[ -z "$search_string" ] || [ -z "$replacement_string" ] && echo "Usage: replace_in_files \"search_string\" \"replacement_string\" [start_directory]" && return 1
	find "$start_directory" -type f ! -path '*/.git/*' -exec grep -l "$search_string" {} + | xargs -d '\n' sed -i "s|$search_string|$replacement_string|g"
	echo "Replacement complete."
}

encrypt_file() {
	[ -z "$1" ] && echo "Usage: encrypt_file <file_to_encrypt>" && return 1
	gpg --encrypt --sign --armor -r "$FILE_KEYID" "$1"
	echo "Encrypted file created: $1.asc"
}

decrypt_file() {
	[ -z "$1" ] && echo "Usage: decrypt_file <file_to_decrypt>" && return 1
	gpg --decrypt "$1" > "${1%.asc}.decrypted"
	echo "Decrypted file created: ${1%.asc}.decrypted"
}

backup_gpg() {
	[ -z "$1" ] && echo "Usage: backup_gpg <backup_directory>" && return 1
	local backup_dir=$1
	mkdir -p "$backup_dir"
	gpg --export --armor > "$backup_dir/public-keys.asc"
	gpg --export-secret-keys --armor > "$backup_dir/private-keys.asc"
	gpg --export-ownertrust > "$backup_dir/ownertrust-gpg.txt"
	echo "GPG keys and trust database have been backed up in '$backup_dir'"
}

restore_gpg() {
	[ -z "$1" ] && echo "Usage: restore_gpg <backup_directory>" && return 1
	local backup_dir=$1
	gpg --import "$backup_dir/private-keys.asc"
	gpg --import "$backup_dir/public-keys.asc"
	gpg --import-ownertrust "$backup_dir/ownertrust-gpg.txt"
	echo "GPG keys and trust database have been restored from '$backup_dir'"
}

backup_ssh() {
	local timestamp=$(date +"%Y%m%d%H%M%S")
	local backup_filename="ssh_backup_$timestamp.tar.bz2"
	local encrypted_filename="$backup_filename.gpg"
	tar -cjf "$backup_filename" -C ~ .ssh
	gpg --symmetric --cipher-algo AES256 --force-mdc "$backup_filename"
	rm "$backup_filename"
	echo "Backup and encryption of .ssh directory completed: $(pwd)/$encrypted_filename"
}

restore_ssh() {
	[ -z "$1" ] && echo "Usage: restore_ssh <encrypted_backup_file>" && return 1
	local encrypted_backup_file="$1"
	local backup_filename="${encrypted_backup_file%.gpg}"
	[ ! -f "$encrypted_backup_file" ] && echo "Encrypted backup file not found: $encrypted_backup_file" && return 1
	gpg --decrypt "$encrypted_backup_file" > "$backup_filename"
	[ $? -ne 0 ] && echo "Decryption failed." && return 1
	tar -xjf "$backup_filename" -C ~
	if [ $? -eq 0 ]; then
		rm "$backup_filename"
		echo "SSH keys successfully restored from $encrypted_backup_file."
	else
		echo "Extraction failed."
		return 1
	fi
}

start_ssh_agent() {
	for key in ~/.ssh/*; do
		if [ -f "$key" ]; then
			filename=$(basename "$key")
			if [[ "$filename" != "authorized_keys" && "$filename" != "config" && "$filename" != "known_hosts" && "$filename" != "bkup" && "$filename" != *.* ]]; then
				ssh-add "$key"
			fi
		fi
	done
}

get_kernel() {
	local tag=$1
	local url="https://gitlab.com/linux-kernel/stable/-/archive/v${tag}/stable-v${tag}.tar.bz2"

	if [ -z "$tag" ]; then
		echo "Error: No tag provided"
		echo "Usage: download_and_extract_kernel <tag>"
		return 1
	fi

	echo "Downloading kernel version ${tag}..."
	wget "$url"

	if [ $? -ne 0 ]; then
		echo "Error: Failed to download kernel version ${tag}"
		return 1
	fi

	FILE_SIZE=$(stat -c %s "stable-v${tag}.tar.bz2")
	if [ "$FILE_SIZE" -lt 100000000 ]; then
		echo "Error: Downloaded file is too small or corrupt. Aborting extraction."
		return 1
	fi

	echo "Extracting kernel version ${tag}..."
	tar -xjf "stable-v${tag}.tar.bz2" -C . && mv "stable-v${tag}" "linux-${tag}"

	if [ $? -eq 0 ]; then
		echo "Kernel version ${tag} extracted to linux-${tag}/"
	else
		echo "Error: Failed to extract kernel version ${tag}"
		return 1
	fi
}

clean_bash_history() {
    local file="$1"
    local temp_file=$(mktemp)
    sed 's/^[ \t]*//;s/[ \t]*$//' "$file" | sed '/^\s*#/d' | sed '/^\s*\/\//d' > "$temp_file"
    awk '!seen[$0]++' "$temp_file" > "$temp_file.cleaned"
    mv "$temp_file.cleaned" "$file"
    rm "$temp_file"
}

if [ -z "$HISTORY_CLEANED_THIS_LOGIN" ]; then
    clean_bash_history ~/.bash_history
    export HISTORY_CLEANED_THIS_LOGIN=1
fi

json-keys() {
    if [[ -z "$1" ]]; then
        echo "Usage: json-keys <file.json>"
        return 1
    fi
    jq -r 'paths | map(tostring) | join(".")' "$1" | sort -u
}

json-shape() {
    if [[ -z "$1" ]]; then
        echo "Usage: json-shape <file.json>"
        return 1
    fi
    jq 'def shape:
          type as $t |
          if $t == "object" then
            to_entries | map({key, value: (shape(.value))})
          elif $t == "array" then
            if length == 0 then [] else [.[0] | shape] end
          else
            $t
          end;
        shape' "$1"
}
