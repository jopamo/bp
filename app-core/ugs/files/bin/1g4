#!/usr/bin/env python3
import re
import sys
import os

def process_filename(filename):
    """
    Process the filename according to the versioning rules:
    - Simple versioning: process normally
    - Date-based, revision, commit, pre-release, and patch versions: ignore or replace as needed.
    """

    simple_version_pattern = r'(\d+\.\d+)(?=\.[^\.]+$)'

    date_version_pattern = r'\.\d{8}\.ebuild$'

    freeze_version_pattern = r'(-r9)(?=\.[^\.]+$)'

    rolling_version_pattern = r'9999\.ebuild$'

    prerelease_version_pattern = r'-\d{4}\d{2}\d{2}(?=\.[^\.]+$)'

    patch_version_pattern = r'(\d+\.\d+)_p(\d+)(?=\.[^\.]+$)'

    fixed_version_pattern = r'(\d+\.\d+)(?=\.[^\.]+$)'

    if re.search(branch_version_pattern, filename):
        return "Branch-based"

    if re.search(freeze_version_pattern, filename):
        return "Frozen"

    if re.search(rolling_version_pattern, filename):
        return "Git Commit Update"

    if re.search(prerelease_version_pattern, filename):
        return "Pre-release"

    if re.search(patch_version_pattern, filename):
        return "Patch Version"

    if re.search(simple_version_pattern, filename):
        return "Normal Stable"

    if re.search(fixed_version_pattern, filename):
        return "Fixed Version"

    return "Unknown"

def generate_report():
    """
    Generate the report with filenames grouped by category
    """

    file_groups = {
        "Normal Stable": [],
        "Frozen": [],
        "Git Commit Update": [],
        "Pre-release": [],
        "Patch Version": [],
        "Fixed Version": [],
        "Date-based": [],
        "Unknown": [],
    }

    filenames = []
    for root, dirs, files in os.walk(os.getcwd()):
        for file in files:
            if file.endswith(".ebuild"):
                filenames.append(os.path.join(root, file))

    for filename in filenames:
        category = process_filename(filename)
        file_groups[category].append(filename)

    print("Generated Report:")
    for category, files in file_groups.items():
        if files:
            print(f"\n{category}:")
            for file in files:
                print(f"{file}")

def run_tests():
    """
    Run the tests
    """
    filenames = [
        "autoconf-2.72.ebuild",
        "binutils-2.43.20250223.ebuild",
        "flex-20250114-r9.ebuild",
        "keepassxc-9999.ebuild",
        "python-exec-20230320.ebuild",
        "unzip-6.0_p28.ebuild",
        "protobuf-30.0.ebuild",
        "codeql-20250222.ebuild",
        "cargo-c-20250222.ebuild",
        "xkeyboard-config-2.40.ebuild",
        "pipewire-1.0.3.ebuild",
        "swaylock-20250320.ebuild",
        "gcc-13.3.20250325.ebuild",
        "curl-20250412.ebuild"
    ]

    print("Testing the following filenames:")
    for filename in filenames:
        category = process_filename(filename)
        print(f"{filename}: {category}")

if __name__ == "__main__":
    if '--test' in sys.argv:
        run_tests()
    else:

        generate_report()
