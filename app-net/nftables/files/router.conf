# /etc/nftables.conf
# Headless router: dead silent on WAN, LAN-friendly for gaming/VoIP
# LAN discovery enabled: mDNS (5353/224.0.0.251), SSDP (1900/239.255.255.250), IGMP

flush ruleset

# -------------------------------------------------------------------
# Interface & network variables
# -------------------------------------------------------------------
define WAN         = "enp1s0"
define LAN         = "enp2s0"
define LAN_NET     = 10.0.5.0/24
define ROUTER_IP   = 10.0.5.1
define LAN_BCAST   = 255.255.255.255
define LAN_DBCAST  = 10.0.5.255
define MDNS_MCAST  = 224.0.0.251
define SSDP_MCAST  = 239.255.255.250

# ============================== INGRESS ==============================
# Kill obvious noise at ingress to save CPU (runs before IP layer)
table netdev hush {
  set mcast4 {
    type ipv4_addr
    flags interval
    elements = { 224.0.0.0/24 }
  }

  chain lan_ingress {
    type filter hook ingress device $LAN priority 0;

    # allow DHCP requests from LAN clients (0.0.0.0:68 -> *:67)
    udp dport 67 accept

    # allow LAN discovery traffic
    ip protocol igmp accept
    udp dport 5353 ip daddr $MDNS_MCAST accept     # mDNS
    udp dport 1900 ip daddr $SSDP_MCAST accept     # SSDP/UPnP discovery

    # silence other broadcast/multicast
    ip daddr $LAN_BCAST drop
    ip daddr $LAN_DBCAST drop
    ip daddr @mcast4 drop
    udp dport {137,138,5355} drop                  # keep NetBIOS/LLMNR drops
    # (no IGMP drop here; we accept it above)
  }

  chain wan_ingress {
    type filter hook ingress device $WAN priority 0;
    ip saddr {
      0.0.0.0/8, 10.0.0.0/8, 100.64.0.0/10, 127.0.0.0/8,
      169.254.0.0/16, 172.16.0.0/12, 192.168.0.0/16,
      224.0.0.0/4, 240.0.0.0/4, 255.255.255.255/32
    } drop
  }
}

# =============================== FILTER ===============================
table ip filter {

  # Reverse-path filter: drop packets that lack a route back via the incoming iface
  chain rpfilter {
    type filter hook prerouting priority mangle + 10; policy accept;

    # Allow DHCPv4 discover (src 0.0.0.0 -> bcast:67) to pass
    iifname $LAN ip saddr 0.0.0.0 udp sport 68 udp dport 67 accept

    # RPF check: if no reverse path via the same interface, drop
    fib saddr . iif oif missing drop
  }

  chain input {
    type filter hook input priority 0; policy drop;

    ct state established,related accept
    ct state invalid counter drop
    tcp flags & (syn|rst|ack) != syn ct state new drop

    iif lo accept

    # WAN DHCP replies to router (if WAN uses DHCP)
    iifname $WAN udp sport 67 udp dport 68 accept

    # Silent to WAN otherwise
    iifname $WAN drop

    # DHCP server on router: clients send 68->67 to broadcast
    iifname $LAN udp sport 68 udp dport 67 accept
    # DHCP offers/acks seen as 67->68 (from this box or a relay)
    iifname $LAN udp sport 67 udp dport 68 accept

    # Anti-spoof
    iifname $LAN ip saddr != $LAN_NET drop

    # Admin access from LAN (rate-limited)
    iifname $LAN ip saddr $LAN_NET tcp dport 22 ct state new tcp flags syn \
      limit rate 30/minute burst 10 packets accept

    # DNS to router
    iifname $LAN ip saddr $LAN_NET ip daddr $ROUTER_IP udp dport 53 accept
    iifname $LAN ip saddr $LAN_NET ip daddr $ROUTER_IP tcp dport 53 accept

    # Useful ICMP from LAN (incl. ping)
    iifname $LAN ip saddr $LAN_NET icmp type { echo-request, destination-unreachable, time-exceeded, parameter-problem } accept

    # Allow LAN multicast discovery to reach the router stack (if needed)
    iifname $LAN ip protocol igmp accept
    iifname $LAN udp dport 5353 ip daddr $MDNS_MCAST accept
    iifname $LAN udp dport 1900 ip daddr $SSDP_MCAST accept

    # Silent LAN broadcast/multicast noise (keep these after the accepts above)
    iifname $LAN ip daddr $LAN_BCAST udp dport {137,138,5353} drop
    ip daddr 224.0.0.0/24 drop
    meta pkttype broadcast drop

    # Block direct DoT to router
    iifname $LAN tcp dport 853 drop
    iifname $LAN udp dport 853 drop

    counter log prefix "INPUT_DROP: " limit rate 5/second drop
  }

  chain forward {
    type filter hook forward priority 0; policy drop;

    ct state invalid drop
    tcp flags & (syn|rst|ack) != syn ct state new drop

    # Basic anti-spoof
    iifname $WAN ip saddr $LAN_NET drop
    iifname $LAN ip saddr != $LAN_NET drop

    # Block DoT from LAN to Internet (enforce DNS redirect)
    iifname $LAN oifname $WAN udp dport 853 drop
    iifname $LAN oifname $WAN tcp dport 853 drop

    # Allow LAN -> WAN
    iifname $LAN oifname $WAN accept

    # Allow return traffic
    iifname $WAN oifname $LAN ct state established,related accept

    counter log prefix "FORWARD_DROP: " limit rate 5/second drop
  }

  chain output {
    type filter hook output priority 0; policy accept;
  }
}

# ================================ NAT ================================
table ip nat {

  chain prerouting {
    type nat hook prerouting priority -100;
    iifname $LAN udp dport 53 redirect to :53
    iifname $LAN tcp dport 53 redirect to :53
  }

  chain postrouting {
    type nat hook postrouting priority 100;
    oifname $WAN masquerade
  }
}
