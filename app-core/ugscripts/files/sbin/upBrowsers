#!/bin/bash

REPO_PATH="/var/db/repos/bp"

finalize_update() {
	local package_path="$1"
	local package_name="$2"
	local new_ebuild_filename="$3"
	local version="$4"

	if ! (cd "$package_path" && pkgdev manifest); then
		echo "Error generating manifest for ${package_name}. Skipping..."
		return 1
	fi

	(cd "$package_path" && \
			git add --all . && \
			git -c user.name="${BOT_USER}" \
			-c user.email="${BOT_EMAIL}" \
			-c commit.gpgsign=true \
			-c user.signingkey="${BOT_KEYID}" \
			commit -m "Update ${package_name} to ${version}" && \
		git push origin HEAD)

	echo "Ebuild updated for ${package_name}: ${new_ebuild_filename}"
}

fetch_latest_brave_versions() {
	local github_repo_url="https://github.com/brave/brave-browser.git"
	local max_versions_to_check=10
	local fetched_versions=()

	local latest_tags=$(git ls-remote --tags --sort="-v:refname" $github_repo_url | \
			grep -oP 'refs/tags/v\d+\.\d+\.\d+' | \
			sed 's/refs\/tags\/v//' | \
			sort -rV | \
		head -"$max_versions_to_check")

	if [[ -z "$latest_tags" ]]; then
		echo "Failed to fetch the latest Brave Browser versions"
		return 1
	fi

	IFS=$'\n' read -rd '' -a versions <<< "$latest_tags"
	for version in "${versions[@]}"; do
		local download_url="https://github.com/brave/brave-browser/releases/download/v${version}/brave-browser-nightly_${version}_amd64.deb"

		if curl --output /dev/null --silent --head --fail "$download_url"; then
			fetched_versions+=("$version")

			if [[ ${#fetched_versions[@]} -eq $max_versions_to_check ]]; then
				break
			fi
		fi
	done

	if [[ ${#fetched_versions[@]} -eq 0 ]]; then
		echo "No valid Brave versions found"
		return 1
	fi

	printf '%s\n' "${fetched_versions[@]}"
}

fetch_latest_chrome_version() {
	local url="https://www.ubuntuupdates.org/package/google_chrome/stable/main/base/google-chrome-unstable"
	local latest_version=$(curl -s "$url" | grep -oP '(?<=<a name=")\d+\.\d+\.\d+\.\d+-\d+' | head -1 | cut -d'-' -f1)
	[[ -z "$latest_version" ]] && { echo "Failed to fetch the latest Google Chrome Unstable version"; return 1; }
	echo "$latest_version"
}

fetch_latest_firefox_version() {
	local current_year=$(date +"%Y")
	local current_month=$(date +"%m")
	local base_url="https://archive.mozilla.org/pub/firefox/nightly/${current_year}/${current_month}/"

	local directories=$(curl -s $base_url | grep -oP '\d{4}-\d{2}-\d{2}-\d{2}-\d{2}-\d{2}-mozilla-central/' | sort -r)

	for dir in $directories; do
		local contents=$(curl -s "${base_url}${dir}")
		local found_version=$(echo "$contents" | grep -oP 'firefox-\d{1,3}\.0a1\.en-US\.linux-x86_64\.tar\.bz2' | head -1 | grep -oP '\d{1,3}\.0a1')

		if [[ ! -z "$found_version" ]]; then
			local date_part=$(echo "$dir" | grep -oP '\d{4}-\d{2}-\d{2}(?=-\d{2}-\d{2}-\d{2}-mozilla-central)' | tr '-' '.')
			local time_part=$(echo "$dir" | grep -oP '\d{2}-\d{2}-\d{2}(?=-mozilla-central/)' | tr '-' '.')
			local version_number=$(echo "$found_version" | cut -d '.' -f 1)
			echo "${date_part}.${version_number}.${time_part}"
			return 0
		fi
	done

	echo "Failed to find a valid Firefox nightly build for the current month."
	return 1
}

update_ebuild() {
	local PACKAGE_PATH="${REPO_PATH}/$1"
	local PACKAGE_NAME="$2"
	local fetched_versions=$3

	IFS=$'\n' read -rd '' -a versions <<< "$fetched_versions"
	for version in "${versions[@]}"; do
		local new_ebuild_filename="${PACKAGE_NAME}-${version}.ebuild"
		local new_ebuild_file="${PACKAGE_PATH}/${new_ebuild_filename}"

		local existing_ebuild_file=$(find "${PACKAGE_PATH}" -maxdepth 1 -type f -name "${PACKAGE_NAME}-*.ebuild" | sort | tail -n 1)
		if [[ -z "$existing_ebuild_file" ]]; then
			echo "No ebuild file found for ${PACKAGE_NAME}."
			continue
		fi

		local existing_version=$(basename "$existing_ebuild_file" | grep -oP "${PACKAGE_NAME}-\K[\d\.]+(?=.ebuild)")

		if ! version_gt "$version" "$existing_version"; then
			echo "Skipping ${version}, as it's not newer than the existing version ${existing_version}."
			continue
		fi

		if [[ -f "$new_ebuild_file" ]]; then
			echo "Ebuild file ${new_ebuild_filename} already exists."
			continue
		fi

		mv "$existing_ebuild_file" "$new_ebuild_file"
		echo "Ebuild file renamed to ${new_ebuild_filename}."

		(cd "${PACKAGE_PATH}" && pkgdev manifest) || continue
		finalize_update "$PACKAGE_PATH" "$PACKAGE_NAME" "$new_ebuild_filename" "$version"
		echo "Ebuild updated for ${PACKAGE_NAME}: ${new_ebuild_filename}"
		break
	done

	if [[ ! -f "$new_ebuild_file" ]]; then
		echo "Failed to update ebuild for ${PACKAGE_NAME}"
		return 1
	fi
}

version_gt() {
	test "$(echo "$@" | tr " " "\n" | sort -V | head -n 1)" != "$1";
}

brave_versions=$(fetch_latest_brave_versions)
[[ $? -eq 0 ]] && update_ebuild "bin/brave-nightly-bin" "brave-nightly-bin" "$brave_versions"

chrome_version=$(fetch_latest_chrome_version)
[[ $? -eq 0 ]] && update_ebuild "bin/google-chrome-unstable" "google-chrome-unstable" "$chrome_version"

firefox_version=$(fetch_latest_firefox_version)
[[ $? -eq 0 ]] && update_ebuild "bin/firefox-nightly-bin" "firefox-nightly-bin" "$firefox_version"
