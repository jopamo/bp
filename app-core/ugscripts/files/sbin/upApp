#!/bin/bash

REPO_PATH="/var/db/repos/bp"

fetch_latest_boost_version() {
    local boost_url="https://www.boost.org/users/history/"
    local latest_version=$(curl -s "$boost_url" | grep -oP 'data-current-version="\K\d+\.\d+\.\d+')
    if [[ -z "$latest_version" ]]; then
        echo "Failed to fetch the latest Boost version"
        return 1
    fi
    echo "$latest_version"
}

fetch_latest_bluez_version() {
    local bluez_git_url="https://git.kernel.org/pub/scm/bluetooth/bluez.git"
    local latest_version=$(git ls-remote --tags --sort="-v:refname" "$bluez_git_url" | \
                        grep -oP 'refs/tags/\K\d+\.\d+' | \
                        sort -urV | \
                        head -1)
    if [[ -z "$latest_version" ]]; then
        echo "Failed to fetch the latest BlueZ version"
        return 1
    fi
    echo "$latest_version"
}

fetch_latest_curl_version() {
    local curl_page_url="https://curl.se/download/"
    local latest_version=$(curl -s "$curl_page_url" | \
                           grep -oP '<td>\K\d+\.\d+\.\d+(?=</td>)' | \
                           sort -Vr | \
                           head -1)
    if [[ -z "$latest_version" ]]; then
        echo "Failed to fetch the latest cURL version"
        return 1
    fi
    echo "$latest_version"
}

fetch_latest_vim_version() {
    local vim_git_url="https://github.com/vim/vim.git"
    local latest_version=$(git ls-remote --tags --sort="-v:refname" "$vim_git_url" | \
                        grep -oP 'refs/tags/v\K\d+\.\d+\.\d+' | \
                        sort -urV | \
                        head -1)
    if [[ -z "$latest_version" ]]; then
        echo "Failed to fetch the latest Vim version"
        return 1
    fi
    echo "$latest_version"
}

fetch_latest_vim_version() {
    local vim_git_url="https://github.com/vim/vim.git"
    local latest_version=$(git ls-remote --tags --sort="-v:refname" "$vim_git_url" | \
                        grep -oP 'refs/tags/v\K\d+\.\d+\.\d+' | \
                        sort -urV | \
                        head -1)
    if [[ -z "$latest_version" ]]; then
        echo "Failed to fetch the latest Vim version"
        return 1
    fi
    echo "$latest_version"
}

update_vim_ebuild() {
    local PACKAGE_PATH="${REPO_PATH}/$1"
    local PACKAGE_NAME="$2"
    local latest_version="$3"

    local vim_ebuild_file=$(find "${PACKAGE_PATH}" -type f -name "vim-*.ebuild" | sort | tail -n 1)

    if [[ -z "$vim_ebuild_file" ]]; then
        echo "No Vim ebuild file found."
        return 1
    fi

    # Ensure the version is formatted correctly (no leading 'v')
    latest_version=${latest_version#v}

    # Construct the new filename with the full version number
    local new_ebuild_filename="${PACKAGE_NAME}-${latest_version}.ebuild"
    local new_file_path="${PACKAGE_PATH}/${new_ebuild_filename}"

    # Rename the ebuild file to match the latest version, if it doesn't already exist
    if [[ "$vim_ebuild_file" != "$new_file_path" ]]; then
        mv "$vim_ebuild_file" "$new_file_path"
        echo "Renamed Vim ebuild to $new_ebuild_filename."
    else
        echo "Vim ebuild is already up to date with version $latest_version."
        return 0
    fi

    (cd ${REPO_PATH} && repoman manifest)
    (cd ${REPO_PATH} && git add . && git commit -m "Update Vim to ${latest_version}")
    echo "Vim ebuild updated to version ${latest_version} in ${new_file_path}."
}

update_ebuild() {
    local PACKAGE_PATH="${REPO_PATH}/$1"
    local PACKAGE_NAME="$2"
    local fetched_versions=$3

    IFS=$'\n' read -rd '' -a versions <<< "$fetched_versions"
    for version in "${versions[@]}"; do
        local new_ebuild_filename="${PACKAGE_NAME}-${version}.ebuild"
        local new_ebuild_file="${PACKAGE_PATH}/${new_ebuild_filename}"
        local ebuild_file=$(find "${PACKAGE_PATH}" -maxdepth 1 -type f -name "${PACKAGE_NAME}-*.ebuild" | sort | tail -n 1)

        if [[ -f "$new_ebuild_file" ]]; then
            echo "Ebuild file ${new_ebuild_filename} already exists."
            continue
        fi
        if [[ -z "$ebuild_file" ]]; then
            echo "No ebuild file found for ${PACKAGE_NAME}."
            continue
        fi

        mv "$ebuild_file" "$new_ebuild_file"
        (cd ${REPO_PATH} && repoman manifest)
        (cd ${REPO_PATH} && git add . && git commit -m "Update ${PACKAGE_NAME} to ${version}")
        echo "Ebuild updated for ${PACKAGE_NAME}: ${new_ebuild_filename}"
        break
    done

    if [[ ! -f "$new_ebuild_file" ]]; then
        echo "Failed to update ebuild for ${PACKAGE_NAME}"
        return 1
    fi
}

# Update Boost
boost_version=$(fetch_latest_boost_version)
[[ $? -eq 0 ]] && update_ebuild "lib-dev/boost" "boost" "$boost_version"

# Update Boost Build
[[ $? -eq 0 ]] && update_ebuild "lib-dev/boost-build" "boost-build" "$boost_version"

# Update BlueZ
bluez_version=$(fetch_latest_bluez_version)
[[ $? -eq 0 ]] && update_ebuild "app-net/bluez" "bluez" "$bluez_version"

# Update cURL
curl_version=$(fetch_latest_curl_version)
[[ $? -eq 0 ]] && update_ebuild "app-net/curl" "curl" "$curl_version"

# Update Vim
vim_version=$(fetch_latest_vim_version)
[[ $? -eq 0 ]] && update_vim_ebuild "app-core/vim" "vim" "$vim_version"
