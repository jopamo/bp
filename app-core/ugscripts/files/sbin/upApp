#!/bin/bash

REPO_PATH="/var/db/repos/bp"

PROGNAME="upApp"

TMP_DIR="/tmp/${PROGNAME}"

DEBUG_LOG="${TMP_DIR}/${PROGNAME}-debug.log"
ERROR_LOG="${TMP_DIR}/${PROGNAME}-error.log"
JSON_LOG="${TMP_DIR}/${PROGNAME}-json.log"

mkdir -p "$TMP_DIR"
: > "$ERROR_LOG"
: > "$JSON_LOG"
: > "$DEBUG_LOG"

handle_github() {
	local repo_url="$1"
	local repo_slug=$(echo "$repo_url" | sed -E 's|https?://github\.com/([^/]+/[^/]+).*|\1|')
	local encoded_slug=$(echo "$repo_slug" | sed 's/\//%2F/g')

	echo "repo_slug $repo_slug" >> "$DEBUG_LOG"
	echo "urlencode $encoded_slug" >> "$DEBUG_LOG"

	local releases_api_url="https://api.github.com/repos/$repo_slug/releases/latest"
	local tags_api_url="https://api.github.com/repos/$repo_slug/tags"
	local auth_header="Authorization: token $GITHUB_TOKEN"
	echo "auth_header $auth_header" >> "$DEBUG_LOG"

	local latest_release_info=$(curl -s -H "$auth_header" "$releases_api_url")
	local latest_version=$(echo "$latest_release_info" | jq -r '.tag_name')
	echo "api_url $releases_api_url" >> "$DEBUG_LOG"
	echo "latest_release_info $latest_release_info" >> "$JSON_LOG"
	echo "latest_version $latest_version" >> "$DEBUG_LOG"

	if [[ -z "$latest_version" || "$latest_version" == "null" ]]; then
		echo "No valid release found, checking tags..." >> "$DEBUG_LOG"
		local latest_tag_info=$(curl -s -H "$auth_header" "$tags_api_url" | jq -r '.[0].name')
		echo "api_url $tags_api_url" >> "$DEBUG_LOG"
		echo "latest_tag_info $latest_tag_info" >> "$JSON_LOG"

		if [[ -z "$latest_tag_info" || "$latest_tag_info" == "null" ]]; then
			echo "Failed to fetch latest tag info" >> "$ERROR_LOG"
			return 1
		else
			latest_version="$latest_tag_info"
		fi
	fi

	# Remove v or V prefix if present
	latest_version="${latest_version#[vV]}"

	latest_version="${latest_version//_/\.}"
	latest_version=$(echo "$latest_version" | sed -E "s/^.*-([0-9]+(\.[0-9]+)*).*/\1/")

	echo "Successfully fetched version info: $latest_version" >> "$DEBUG_LOG"
	echo "$latest_version"
	return 0
}

handle_gitlab() {
	local repo_url="$1"
	local repo_slug=$(echo "$repo_url" | sed -E 's|https?://gitlab\.com/([^/]+/[^/]+).*|\1|')
	local encoded_slug=$(echo "$repo_slug" | sed 's/\//%2F/g')
	local api_url="https://gitlab.com/api/v4/projects/$encoded_slug/releases"
	local auth_header="Authorization: Bearer $GITLAB_TOKEN"
	local latest_release_info=$(curl -s -H "$auth_header" "$api_url" | jq '[.[] | select(.released_at)] | max_by(.released_at)')
	if [[ $? -ne 0 || -z "$latest_release_info" ]]; then
		echo "Failed to fetch latest release info"
		return 1
	else
		local latest_version=$(echo "$latest_release_info" | jq -r '.tag_name')
		# Remove v or V prefix if present
		latest_version="${latest_version#[vV]}"
		echo "$latest_version"
	fi
}

update_github_package() {
	local category="$1"
	local package_name="$2"
	local repo_url="$3"
	local latest_version=$(handle_github "$repo_url")
	if [[ $? -eq 0 ]]; then
		update_ebuild "${category}/${package_name}" "${package_name}" "${latest_version}"
	else
		echo "Failed to update $package_name package" >> "$ERROR_LOG"
	fi
}

update_ebuild() {
	local package_path="${REPO_PATH}/$1"
	local package_name="$2"
	local latest_version="$3"

	local new_ebuild_filename="${package_name}-${latest_version}.ebuild"
	local new_ebuild_file="${package_path}/${new_ebuild_filename}"

	echo "Updating ebuild for package_path: $package_path, package_name: $package_name, latest_version: $latest_version" >> "$DEBUG_LOG"
	echo "New ebuild filename: $new_ebuild_filename" >> "$DEBUG_LOG"
	echo "New ebuild file path: $new_ebuild_file" >> "$DEBUG_LOG"

	local ebuild_file=$(find "${package_path}" -type f -name "${package_name}-[0-9]*.ebuild" | sort -V | tail -n 1)
	echo "Found ebuild file: $ebuild_file" >> "$DEBUG_LOG"

	if [[ -z "$ebuild_file" ]]; then
		echo "No existing ebuild file found for ${package_name} at ${package_path}." >> "$ERROR_LOG"
		return 1
	fi

	local current_version=$(basename "$ebuild_file" | sed -e "s/^${package_name}-//" -e 's/\.ebuild$//')
	echo "Current version: $current_version" >> "$DEBUG_LOG"

	if [[ "$current_version" == "$latest_version" ]]; then
		echo "No update needed for ${package_name} as it is already at the latest version: ${latest_version}." >> "$DEBUG_LOG"
		return
	fi

	if [[ -f "$new_ebuild_file" ]]; then
		echo "Ebuild file ${new_ebuild_filename} already exists. No update needed." >> "$DEBUG_LOG"
		return
	fi

	mv "$ebuild_file" "$new_ebuild_file"
	echo "New ebuild file created for ${package_name}: ${new_ebuild_filename}" >> "$DEBUG_LOG"

	if finalize_update "$package_path" "$package_name" "$new_ebuild_filename" "$latest_version"; then
		echo "Ebuild successfully updated for ${package_name}: ${new_ebuild_filename}" >> "$DEBUG_LOG"
	else
		echo "Failed to update ebuild for ${package_name}" >> "$ERROR_LOG"
		return 1
	fi
}

update_gitlab_package() {
	local category="$1"
	local package_name="$2"
	local repo_url="$3"
	local latest_version=$(handle_gitlab "$repo_url")
	if [[ $? -eq 0 ]]; then
		update_ebuild "${category}/${package_name}" "$package_name" "$latest_version"
	else
		echo "Failed to update $package_name package" >> "$ERROR_LOG"
	fi
}

finalize_update() {
	local package_path="$1"
	local package_name="$2"
	local new_ebuild_filename="$3"
	local version="$4"

	echo "Finalizing update for $package_name in $package_path" >> "$DEBUG_LOG"

	if ! (cd "$package_path" && pkgdev manifest); then
		echo "Error generating manifest for ${package_name}. Skipping..." >> "$ERROR_LOG"
		return 1
	fi

	(cd "$package_path" && \
			git add --all . && \
			git -c user.name="${BOT_USER}" \
			-c user.email="${BOT_EMAIL}" \
			-c commit.gpgsign=true \
			-c user.signingkey="${BOT_KEYID}" \
			commit -m "Update ${package_name} to ${version}" && \
		git push origin HEAD)

	echo "Ebuild updated for ${package_name}: ${new_ebuild_filename}" >> "$DEBUG_LOG"
}

fetch_latest_gnu_version() {
	local base_url="https://ftp.gnu.org/gnu/$1/"
	local latest_version=$(curl -s "$base_url" | grep -oP 'href="\K'$1'-[0-9.]+(?=\.tar)' | \
			sed 's/'$1'-//g' | \
			sort -Vr | \
		head -1)
	if [[ -z "$latest_version" ]]; then
		echo "Failed to fetch the latest $1 version" >> "$ERROR_LOG"
		return 1
	fi
	echo "$latest_version"
}

fetch_latest_cryptsetup_version() {
	local base_url="https://mirrors.edge.kernel.org/pub/linux/utils/cryptsetup/"
	local latest_version=$(curl -s "$base_url" | grep -oP 'href="v[0-9]+\.[0-9]+/' | grep -v -- "-rc" | sort -Vr | head -1 | cut -d '"' -f 2)

	if [[ -z "$latest_version" ]]; then
		echo "Failed to fetch the latest Cryptsetup version directory" >> "$ERROR_LOG"
		return 1
	fi

	local version_page="${base_url}${latest_version}"
	local latest_final_version=$(curl -s "$version_page" | grep -oP 'cryptsetup-\K[0-9]+\.[0-9]+\.[0-9]+(?=\.tar\.gz)' | sort -Vr | head -1)

	if [[ -z "$latest_final_version" ]]; then
		echo "Failed to find the latest Cryptsetup final version" >> "$ERROR_LOG"
		return 1
	fi

	echo "$latest_final_version"
}

update_gnu_package() {
	local package_name=$1
	local package_version=$(fetch_latest_gnu_version "$package_name")
	if [[ $? -eq 0 ]]; then
		update_ebuild "app-build/$package_name" "$package_name" "$package_version"
	fi
}

fetch_latest_git_version() {
	local repo_url="$1"

	local version_pattern='refs/tags/\K[0-9.]+(?=\^{})'

	local latest_version=$(git ls-remote --tags --sort="-v:refname" "$repo_url" | \
			grep -oP "$version_pattern" | \
		head -1)

	if [[ -z "$latest_version" ]]; then
		echo "Failed to fetch the latest version from $repo_url" >> "$ERROR_LOG"
		return 1
	fi

	# Remove v or V prefix if present
	latest_version="${latest_version#[vV]}"

	echo "$latest_version"
}

update_git_package() {
	local category="$1"
	local package_name="$2"
	local repo_url="$3"

	local package_version=$(fetch_latest_git_version "$repo_url")
	if [[ $? -eq 0 ]]; then
		update_ebuild "${category}/${package_name}" "$package_name" "$package_version"
	else
		echo "Failed to update $package_name package" >> "$ERROR_LOG"
	fi
}

cryptsetup_version=$(fetch_latest_cryptsetup_version)
[[ $? -eq 0 ]] && update_ebuild "app-fs/cryptsetup" "cryptsetup" "$cryptsetup_version"

if [[ $? -eq 0 ]]; then
	update_gnu_package "autoconf-archive"
	update_gnu_package "autoconf"
	update_gnu_package "automake"
	update_gnu_package "gettext"
	update_gnu_package "m4"
	update_gnu_package "bison"
	update_gnu_package "make"
	update_gnu_package "texinfo"
fi

#update_github_package "app-dev" "eglexternalplatform" "https://github.com/NVIDIA/eglexternalplatform"
#update_github_package "app-fs" "lsscsi" "https://github.com/hreinecke/lsscsi"
#update_github_package "app-lang" "nasm" "https://github.com/netwide-assembler/nasm"
#update_github_package "app-lang" "python-exec" "https://github.com/mgorny/python-exec"
#update_github_package "app-tex" "docbook-xsl-stylesheets" "https://github.com/docbook/wiki/wiki"
#update_github_package "app-tex" "ghostscript-gpl" "https://github.com/ArtifexSoftware/ghostpdl-downloads"
#update_github_package "bin" "discord" "https://github.com/electron/electron"
#update_github_package "bin" "qaac" "https://github.com/nu774/qaac"
#update_github_package "fonts" "liberation-fonts" "https://github.com/liberationfonts/liberation-fonts"
#update_github_package "lib-dev" "icu" "https://github.com/unicode-org/icu"
#update_github_package "lib-net" "c-ares" "https://github.com/c-ares/c-ares"
#update_github_package "xgui-lib" "yajl" "https://github.com/lloyd/yajl"
update_git_package "app-net" "bluez" "https://git.kernel.org/pub/scm/bluetooth/bluez.git"
update_github_package "app-compression" "libzip" "https://github.com/nih-at/libzip"
update_github_package "app-core" "gentoo-functions" "https://github.com/gentoo/gentoo-functions"
update_github_package "app-core" "pkgcore" "https://github.com/pkgcore/pkgcore"
update_github_package "app-core" "shadow" "https://github.com/shadow-maint/shadow"
update_github_package "app-core" "vim" "https://github.com/vim/vim"
update_github_package "app-core" "which" "https://github.com/carlowood/which"
update_github_package "app-crypto" "acme" "https://github.com/certbot/certbot"
update_github_package "app-crypto" "botan" "https://github.com/randombit/botan"
update_github_package "app-crypto" "certbot" "https://github.com/certbot/certbot"
update_github_package "app-crypto" "p11-kit" "https://github.com/p11-glue/p11-kit"
update_github_package "app-dev" "cmake" "https://github.com/Kitware/CMake"
update_github_package "app-dev" "meson" "https://github.com/mesonbuild/meson"
update_github_package "app-dev" "re2c" "https://github.com/skvadrik/re2c"
update_github_package "app-dev" "strace" "https://github.com/strace/strace"
update_github_package "app-fs" "btrfs-progs" "https://github.com/kdave/btrfs-progs"
update_github_package "app-lang" "sassc" "https://github.com/sass/sassc"
update_github_package "app-net" "curl" "https://github.com/curl/curl"
update_github_package "app-net" "openresolv" "https://github.com/NetworkConfiguration/openresolv"
update_github_package "app-port" "gpyutils" "https://github.com/projg2/gpyutils"
update_github_package "app-port" "pkgcheck" "https://github.com/pkgcore/pkgcheck"
update_github_package "app-port" "pkgdev" "https://github.com/pkgcore/pkgdev"
update_github_package "app-server" "easy-rsa" "https://github.com/OpenVPN/easy-rsa"
update_github_package "app-server" "redis" "https://github.com/redis/redis"
update_github_package "app-tex" "build-docbook-catalog" "https://github.com/gentoo/build-docbook-catalog"
update_github_package "app-util" "bc" "https://github.com/gavinhoward/bc"
update_github_package "app-var" "push" "https://github.com/vaeth/push"
update_github_package "app-var" "quoter" "https://github.com/vaeth/quoter"
update_github_package "bin" "apktool" "https://github.com/iBotPeaches/Apktool"
update_github_package "bin" "vscodium" "https://github.com/VSCodium/VSCodium"
update_github_package "lib-core" "libpcre2" "https://github.com/PCRE2Project/pcre2"
update_github_package "lib-core" "musl-fts" "https://github.com/void-linux/musl-fts"
update_github_package "lib-core" "ncurses" "https://github.com/ThomasDickey/ncurses-snapshots"
update_github_package "lib-core" "ncurses5-compat" "https://github.com/ThomasDickey/ncurses-snapshots"
update_github_package "lib-core" "pam" "https://github.com/linux-pam/linux-pam"
update_github_package "lib-dev" "boost" "https://github.com/boostorg/boost"
update_github_package "lib-dev" "boost-build" "https://github.com/boostorg/boost"
update_github_package "lib-dev" "liblinear" "https://github.com/cjlin1/liblinear"
update_github_package "lib-dev" "libuv" "https://github.com/libuv/libuv"
update_github_package "lib-dev" "libyaml" "https://github.com/yaml/libyaml"
update_github_package "lib-dev" "oniguruma" "https://github.com/kkos/oniguruma"
update_github_package "lib-dev" "protobuf" "https://github.com/protocolbuffers/protobuf"
update_github_package "lib-dev" "tinyxml2" "https://github.com/leethomason/tinyxml2"
update_github_package "lib-net" "libnsl" "https://github.com/thkukuk/libnsl"
update_github_package "lib-net" "libpsl" "https://github.com/rockdaboot/libpsl"
update_github_package "lib-print" "cups-filters" "https://github.com/OpenPrinting/cups-filters"
update_github_package "xgui-app" "keepassxc" "https://github.com/keepassxreboot/keepassxc"
update_github_package "xgui-misc" "harfbuzz" "https://github.com/harfbuzz/harfbuzz"
update_github_package "xgui-misc" "libsndfile" "https://github.com/libsndfile/libsndfile"
update_github_package "xgui-misc" "pulseaudio" "https://github.com/pulseaudio/pulseaudio"
update_github_package "xgui-misc" "wine" "https://github.com/wine-staging/wine-staging"
update_github_package "xgui-tools" "alsa-plugins" "https://github.com/alsa-project/alsa-plugins"
update_github_package "xmedia-app" "pngquant" "https://github.com/kornelski/pngquant"
update_github_package "xmedia-lib" "graphene" "https://github.com/ebassi/graphene"
update_github_package "xmedia-lib" "libimagequant" "https://github.com/ImageOptim/libimagequant"

rm -rf "${TMP_DIR}"
