#!/usr/sbin/nft -f
###############################################################
#         EASY-TUNE VARIABLES
###############################################################
define WAN_IF         = eth0
define LAN_IF         = eth1
define LAN_NET        = x.x.x.0/24
define ROUTER_LAN_IP  = x.x.x.5
define PLEX_LAN_IP    = x.x.x.69
define PLEX_EXT_PORT  = 99999
define PLEX_LAN_PORT  = 99999
define QBIT_PORT      = 99999
define SSH_PORT       = 22
define LOG_DROPS      = 1

# More networks you want to treat as local (for anti-spoof)
define PRIVATE_NETS = { 10.0.0.0/8, 172.16.0.0/12, 192.168.0.0/16, 169.254.0.0/16, 127.0.0.0/8 }

###############################################################
#       FLUSH OLD RULESET
###############################################################
flush ruleset

###############################################################
#         BLOCK-LIST OF PUBLIC DNS RESOLVERS
###############################################################
table ip filter {
    set dns_blocked_ips {
        type ipv4_addr
        flags interval
        elements = {
            185.228.168.168, 185.228.169.168,
            208.67.222.222, 208.67.220.220,
            208.67.222.123, 208.67.220.123,
            1.1.1.1, 1.0.0.1, 1.1.1.2, 1.0.0.2,
            1.1.1.3, 1.0.0.3,
            9.9.9.10, 149.112.112.10,
            9.9.9.11, 149.112.112.11,
            8.8.8.8, 8.8.4.4
        }
    }

    ###########################################################
    #         INPUT CHAIN
    ###########################################################
    chain input {
        type filter hook input priority 0; policy drop;

        # Anti-spoof: Block packets from private ranges on WAN
        iif $WAN_IF ip saddr $PRIVATE_NETS counter drop

        # Block traffic headed to blocked public DNS servers
        ip daddr @dns_blocked_ips counter drop

        # Fast-path: keep established/related flows
        ct state established,related counter accept
        ct state invalid counter drop

        # Allow loopback
        iif lo counter accept

        # SSH from LAN
        iifname $LAN_IF ip saddr $LAN_NET tcp dport $SSH_PORT counter accept

        # DHCP server on router
        iifname $LAN_IF udp dport {67,68} counter accept

        # LAN clients -> router DNS
        iifname $LAN_IF ip saddr $LAN_NET ip daddr $ROUTER_LAN_IP udp dport 53 counter accept
        iifname $LAN_IF ip saddr $LAN_NET ip daddr $ROUTER_LAN_IP tcp dport 53 counter accept

        # ICMP ping (LAN + WAN)
        iifname $LAN_IF ip saddr $LAN_NET icmp type echo-request counter accept
        iifname $WAN_IF icmp type echo-request counter accept

        # qBittorrent (LAN only)
        iifname $LAN_IF ip saddr $LAN_NET tcp dport $QBIT_PORT ct state new counter accept

        # Plex external port (WAN)
        iifname $WAN_IF tcp dport $PLEX_EXT_PORT ct state new counter accept

        # Block DNS-over-TLS (DoT) from LAN
        iifname $LAN_IF {tcp, udp} dport 853 counter drop

        # Drop everything else (log if enabled)
        meta l4proto { tcp, udp, icmp } counter
        @log_if_enabled
        drop
    }

    ###########################################################
    #         FORWARD CHAIN
    ###########################################################
    chain forward {
        type filter hook forward priority 0; policy drop;

        # Anti-spoof: Drop packets from private ranges from WAN
        iif $WAN_IF ip saddr $PRIVATE_NETS counter drop

        # Drop forwarding to blocked DNS IPs
        ip daddr @dns_blocked_ips counter drop

        # Router’s own DoT to WAN is allowed
        ip saddr $ROUTER_LAN_IP oifname $WAN_IF {tcp, udp} dport 853 counter accept

        # Block LAN → WAN DoT
        iifname $LAN_IF oifname $WAN_IF {tcp, udp} dport 853 counter drop

        # Typical LAN → WAN & return
        iifname $LAN_IF oifname $WAN_IF counter accept
        iifname $WAN_IF oifname $LAN_IF counter accept

        # Drop everything else (log if enabled)
        @log_if_enabled
        drop
    }

    ###########################################################
    #         OUTPUT CHAIN
    ###########################################################
    chain output {
        type filter hook output priority 0; policy accept;

        # Block router itself from talking to public DNS IPs
        ip daddr @dns_blocked_ips counter drop

        # Allow router’s DoT to WAN
        ip saddr $ROUTER_LAN_IP oifname $WAN_IF {tcp, udp} dport 853 counter accept
    }
}

###############################################################
#         NAT TABLE
###############################################################
table ip nat
