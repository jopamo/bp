# Distributed under the terms of the GNU General Public License v2

EAPI=8

inherit python-any-r1

NSS_VER=$(ver_cut 1-)
RTM_NAME="NSS_${NSS_VER//./_}_RTM"

DESCRIPTION="Common CA Certificates PEM files"
HOMEPAGE="https://packages.debian.org/sid/ca-certificates"
SRC_URI="https://archive.mozilla.org/pub/security/nss/releases/${RTM_NAME}/src/nss-${NSS_VER}.tar.gz"

LICENSE="MPL-2.0"
SLOT="0"
KEYWORDS="amd64 arm64"

DEPEND="
	app-var/c_rehash
	app-core/debianutils
"

RDEPEND="${DEPEND}"

S="${WORKDIR}/nss-${NSS_VER}"

pkg_setup() {
	python-any-r1_pkg_setup
}

src_prepare() {
	default

	cp -rp "${FILESDIR}/mozilla" "${S}/"
	cp "${FILESDIR}/update-ca-certificates" "${S}/" || die
	chmod +x "${S}/update-ca-certificates" || die
}

src_compile() {
	local d="${S}/mozilla"
	local coreconf_dir="${S}/nss/coreconf"
	local builtins_dir="${S}/nss/lib/ckfw/builtins"
	local c="${ED}/usr/share/${PN}"

	# Build nsinstall if not already built
	#cd "${coreconf_dir}" || die
	#emake nsinstall || die

	# Prepare the directory for certdata.txt and nssckbi.h
	mkdir -p "${d}" || die
	cp "${builtins_dir}"/{certdata.txt,nssckbi.h} "${d}" || die

	# Compile the certificate database
	emake -C "${d}" || die

	# Move generated .crt files to the expected directory
	mkdir -p etc/ssl/certs \
		etc/ca-certificates/update.d \
		"${c}/mozilla" || die
	mv "${d}"/*.crt "${c}/mozilla/" || die

	# Generate ca-certificates.conf to manage the .crt files
	(
		echo "# Automatically generated by ${CATEGORY}/${PF}"
		echo "# $(date -u)"
		echo "# Do not edit."
		cd "${c}" || die
		find . -name '*.crt' | sed 's|^\./||' | LC_ALL=C sort
	) > etc/ca-certificates.conf || die

	# Run update-ca-certificates in the staging area to build the bundle
	mkdir -p "${ED}/etc/ssl/certs"
	sh "${S}/update-ca-certificates" --root "${ED}/" || die
}

src_install() {
	local certs_dir="${D}/etc/ssl/certs"
	local share_dir="${D}/usr/share/ca-certificates/mozilla"

	# Install the update-ca-certificates script to the appropriate directory
	dobin "${S}/update-ca-certificates"

	# Install the certificates into the mozilla directory
	insinto /usr/share/ca-certificates/mozilla
	doins nss/lib/ckfw/builtins/*.crt

	# Run update-ca-certificates in the build directory to create the bundle and symlinks
	"${D}/usr/bin/update-ca-certificates" --fresh --root="${D}" || die

	# Generate the ca-certificates.conf file for managed certificates
	insinto /etc
	(
		echo "# Automatically generated by ${CATEGORY}/${PF}"
		echo "# $(date -u)"
		echo "# Do not edit."
		cd "${D}/usr/share/ca-certificates/mozilla" || die
		find . -name '*.crt' | sed 's|^\./||' | LC_ALL=C sort
	) > "${T}/ca-certificates.conf" || die
	doins "${T}/ca-certificates.conf"

	# Documentation
	dodoc "${S}/nss/README"
}

pkg_postinst() {
	if [[ -n "$(find -L "${EROOT}"/etc/ssl/certs/ -type l)" ]] ; then
		ewarn "Removing the following broken symlinks:"
		find -L "${EROOT}"/etc/ssl/certs/ -type l -printf '%p -> %l\n' -delete | ewarn
	fi
	elog "The CA certificates have been updated."
}
