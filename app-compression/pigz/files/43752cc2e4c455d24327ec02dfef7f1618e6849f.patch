From 43752cc2e4c455d24327ec02dfef7f1618e6849f Mon Sep 17 00:00:00 2001
From: Mark Adler <madler@alumni.caltech.edu>
Date: Tue, 8 May 2018 21:20:39 -0700
Subject: [PATCH] Remove destruct() from yarn and usage from pigz.

Remove destruct() to avoid dependence on pthread_cancel(), where
that thread operation is not available on many platforms. This is
in preparation for providing a Windows port of pigz.
---
 pigz.c | 18 ++++++------------
 yarn.c | 16 +++-------------
 yarn.h |  9 ++-------
 3 files changed, 11 insertions(+), 32 deletions(-)

diff --git a/pigz.c b/pigz.c
index bb5816f..69239b7 100644
--- a/pigz.c
+++ b/pigz.c
@@ -3177,6 +3177,8 @@ local void outb_check(void *dummy) {
 // write and check threads and return for more decompression while that's going
 // on (or just write and check if no threads or if proc == 1).
 local int outb(void *desc, unsigned char *buf, unsigned len) {
+    (void)desc;
+
 #ifndef NOTHREAD
     static thread *wr, *ch;
 
@@ -3205,14 +3207,8 @@ local int outb(void *desc, unsigned char *buf, unsigned len) {
         // if requested with len == 0, clean up -- terminate and join write and
         // check threads, free lock
         if (len == 0 && outb_write_more != NULL) {
-            if (desc != NULL) {
-                destruct(ch);
-                destruct(wr);
-            }
-            else {
-                join(ch);
-                join(wr);
-            }
+            join(ch);
+            join(wr);
             free_lock(outb_check_more);
             free_lock(outb_write_more);
             outb_write_more = NULL;
@@ -3225,8 +3221,6 @@ local int outb(void *desc, unsigned char *buf, unsigned len) {
     }
 #endif
 
-    (void)desc;
-
     // if just one process or no threads, then do it without threads
     if (len) {
         if (g.decode == 1)
@@ -3817,7 +3811,7 @@ local void process(char *path) {
                     punt(err);
                 complain("skipping: %s", err.why);
                 drop(err);
-                outb(&g, NULL, 0);
+                outb(NULL, NULL, 0);
             }
             load_end();
             return;
@@ -3918,7 +3912,7 @@ local void process(char *path) {
                 punt(err);
             complain("skipping: %s", err.why);
             drop(err);
-            outb(g.outf, NULL, 0);
+            outb(NULL, NULL, 0);
             if (g.outd != -1 && g.outd != 1) {
                 close(g.outd);
                 g.outd = -1;
diff --git a/yarn.c b/yarn.c
index 459805d..165c097 100644
--- a/yarn.c
+++ b/yarn.c
@@ -1,6 +1,6 @@
 /* yarn.c -- generic thread operations implemented using pthread functions
- * Copyright (C) 2008, 2011, 2012, 2015 Mark Adler
- * Version 1.4  19 Jan 2015  Mark Adler
+ * Copyright (C) 2008, 2011, 2012, 2015, 2018 Mark Adler
+ * Version 1.5  8 May 2018  Mark Adler
  * For conditions of distribution and use, see copyright notice in yarn.h
  */
 
@@ -19,6 +19,7 @@
                        Fix documentation in yarn.h for yarn_prefix
    1.4    19 Jan 2015  Allow yarn_abort() to avoid error message to stderr
                        Accept and do nothing for NULL argument to free_lock()
+   1.5     8 May 2018  Remove destruct() to avoid use of pthread_cancel()
  */
 
 /* for thread portability */
@@ -367,14 +368,3 @@ int join_all(void)
     release(&(threads_lock));
     return count;
 }
-
-/* cancel and join the thread -- the thread will cancel when it gets to a file
-   operation, a sleep or pause, or a condition wait */
-void destruct(thread *off_course)
-{
-    int ret;
-
-    if ((ret = pthread_cancel(off_course->id)) != 0)
-        fail(ret);
-    join(off_course);
-}
diff --git a/yarn.h b/yarn.h
index 67cf56d..b19a59f 100644
--- a/yarn.h
+++ b/yarn.h
@@ -1,6 +1,6 @@
 /* yarn.h -- generic interface for thread operations
- * Copyright (C) 2008, 2011, 2012, 2015 Mark Adler
- * Version 1.4  19 Jan 2015  Mark Adler
+ * Copyright (C) 2008, 2011, 2012, 2015, 2018 Mark Adler
+ * Version 1.5  8 May 2018  Mark Adler
  */
 
 /*
@@ -63,10 +63,6 @@
         the count of the number of threads joined (join_all() should only be
         called from the main thread, and should only be called after any calls
         of join() have completed)
-   destruct(thread) - terminate the thread in mid-execution and join it
-        (depending on the implementation, the termination may not be immediate,
-        but may wait for the thread to execute certain thread or file i/o
-        operations)
 
    -- Lock functions --
 
@@ -118,7 +114,6 @@ typedef struct thread_s thread;
 thread *launch(void (*)(void *), void *);
 void join(thread *);
 int join_all(void);
-void destruct(thread *);
 
 typedef struct lock_s lock;
 lock *new_lock(long);
