#!/bin/bash

REPO_PATH="/var/db/repos/bp"

fetch_latest_brave_versions() {
    local github_repo_url="https://github.com/brave/brave-browser.git"
    local fetched_versions=()

    # Fetch the tags and sort them in descending order based on version numbers
    local latest_tags=$(git ls-remote --tags --sort="-v:refname" $github_repo_url | \
                        grep -oP 'refs/tags/v\d+\.\d+\.\d+' | \
                        sort -urV | \
                        head -5 | \
                        sed 's/refs\/tags\/v//' | \
                        sort -rV)

    if [[ -z "$latest_tags" ]]; then
        echo "Failed to fetch the latest Brave Browser versions"
        return 1
    fi

    # Iterate over tags and check for available downloads
    IFS=$'\n' read -rd '' -a versions <<< "$latest_tags"
    for version in "${versions[@]}"; do
        local download_url="https://github.com/brave/brave-browser/releases/download/v${version}/brave-browser-nightly_${version}_amd64.deb"

        if curl --output /dev/null --silent --head --fail "$download_url"; then
            fetched_versions+=("$version")
        fi
    done

    # Check if we found any valid versions
    if [[ ${#fetched_versions[@]} -eq 0 ]]; then
        echo "No valid Brave versions found"
        return 1
    fi

    # Return the valid versions
    printf '%s\n' "${fetched_versions[@]}"
}

fetch_latest_chrome_version() {
    local url="https://www.ubuntuupdates.org/package/google_chrome/stable/main/base/google-chrome-unstable"
    local latest_version=$(curl -s "$url" | grep -oP '(?<=<a name=")\d+\.\d+\.\d+\.\d+-\d+' | head -1 | cut -d'-' -f1)
    [[ -z "$latest_version" ]] && { echo "Failed to fetch the latest Google Chrome Unstable version"; return 1; }
    echo "$latest_version"
}

fetch_latest_firefox_version() {
    local current_year=$(date +"%Y")
    local current_month=$(date +"%m")
    local base_url="https://archive.mozilla.org/pub/firefox/nightly/${current_year}/${current_month}/"

    local directories=$(curl -s $base_url | grep -oP '\d{4}-\d{2}-\d{2}-\d{2}-\d{2}-\d{2}-mozilla-central/' | sort -r)

    for dir in $directories; do
        local contents=$(curl -s "${base_url}${dir}")
        local found_version=$(echo "$contents" | grep -oP 'firefox-\d{1,3}\.0a1\.en-US\.linux-x86_64\.tar\.bz2' | head -1 | grep -oP '\d{1,3}\.0a1')

        if [[ ! -z "$found_version" ]]; then
            local date_part=$(echo "$dir" | grep -oP '\d{4}-\d{2}-\d{2}(?=-\d{2}-\d{2}-\d{2}-mozilla-central)' | tr '-' '.')
            local time_part=$(echo "$dir" | grep -oP '\d{2}-\d{2}-\d{2}(?=-mozilla-central/)' | tr '-' '.')
            local version_number=$(echo "$found_version" | cut -d '.' -f 1)
            echo "${date_part}.${version_number}.${time_part}"
            return 0
        fi
    done

    echo "Failed to find a valid Firefox nightly build for the current month."
    return 1
}

update_ebuild() {
    local PACKAGE_PATH="${REPO_PATH}/$1"
    local PACKAGE_NAME="$2"
    local fetched_versions=$3

    IFS=$'\n' read -rd '' -a versions <<< "$fetched_versions"
    for version in "${versions[@]}"; do
        # Generate the new ebuild file name
        local new_ebuild_filename="${PACKAGE_NAME}-${version}.ebuild"
        local new_ebuild_file="${PACKAGE_PATH}/${new_ebuild_filename}"
        local ebuild_file=$(find "${PACKAGE_PATH}" -maxdepth 1 -type f -name "${PACKAGE_NAME}-*.ebuild" | sort | tail -n 1)

        if [[ -f "$new_ebuild_file" ]]; then
            echo "Ebuild file ${new_ebuild_filename} already exists."
            continue
        fi
        if [[ -z "$ebuild_file" ]]; then
            echo "No ebuild file found for ${PACKAGE_NAME}."
            continue
        fi

        mv "$ebuild_file" "$new_ebuild_file"
        (cd ${REPO_PATH} && repoman manifest)
        (cd ${REPO_PATH} && git add . && git commit -m "Update ${PACKAGE_NAME} to ${version}")
        echo "Ebuild updated for ${PACKAGE_NAME}: ${new_ebuild_filename}"
        break
    done

    if [[ ! -f "$new_ebuild_file" ]]; then
        echo "Failed to update ebuild for ${PACKAGE_NAME}"
        return 1
    fi
}

# Update Brave
brave_versions=$(fetch_latest_brave_versions)
[[ $? -eq 0 ]] && update_ebuild "bin/brave-nightly-bin" "brave-nightly-bin" "$brave_versions"

# Update Chrome
chrome_version=$(fetch_latest_chrome_version)
[[ $? -eq 0 ]] && update_ebuild "bin/google-chrome-unstable" "google-chrome-unstable" "$chrome_version"

# Update Firefox
firefox_version=$(fetch_latest_firefox_version)
[[ $? -eq 0 ]] && update_ebuild "bin/firefox-nightly-bin" "firefox-nightly-bin" "$firefox_version"
